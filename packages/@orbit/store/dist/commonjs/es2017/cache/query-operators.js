"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var data_1 = require("@orbit/data");
var EMPTY = function () {};
exports.QueryOperators = {
    findRecord: function (cache, expression) {
        var _a = expression.record,
            type = _a.type,
            id = _a.id;
        var record = cache.records(type).get(id);
        if (!record) {
            throw new data_1.RecordNotFoundException(type, id);
        }
        return record;
    },
    findRecords: function (cache, expression) {
        var results = Array.from(cache.records(expression.type).values());
        if (expression.filter) {
            results = filterRecords(results, expression.filter);
        }
        if (expression.sort) {
            results = sortRecords(results, expression.sort);
        }
        if (expression.page) {
            results = paginateRecords(results, expression.page);
        }
        return results;
    },
    findRelatedRecords: function (cache, expression) {
        var record = expression.record,
            relationship = expression.relationship;
        var type = record.type,
            id = record.id;
        var currentRecord = cache.records(type).get(id);
        var data = currentRecord && utils_1.deepGet(currentRecord, ['relationships', relationship, 'data']);
        if (!data) {
            return [];
        }
        return data.map(function (r) {
            return cache.records(r.type).get(r.id);
        });
    },
    findRelatedRecord: function (cache, expression) {
        var record = expression.record,
            relationship = expression.relationship;
        var type = record.type,
            id = record.id;
        var currentRecord = cache.records(type).get(id);
        var data = currentRecord && utils_1.deepGet(currentRecord, ['relationships', relationship, 'data']);
        if (!data) {
            return null;
        }
        var r = data;
        return cache.records(r.type).get(r.id);
    }
};
function filterRecords(records, filters) {
    return records.filter(function (record) {
        for (var i = 0, l = filters.length; i < l; i++) {
            if (!applyFilter(record, filters[i])) {
                return false;
            }
        }
        return true;
    });
}
function applyFilter(record, filter) {
    if (filter.kind === 'attribute') {
        var actual = utils_1.deepGet(record, ['attributes', filter.attribute]);
        var expected = filter.value;
        switch (filter.op) {
            case 'equal':
                return actual === expected;
            case 'gt':
                return actual > expected;
            case 'gte':
                return actual >= expected;
            case 'lt':
                return actual < expected;
            case 'lte':
                return actual <= expected;
            default:
                throw new data_1.QueryExpressionParseError('Filter operation ${filter.op} not recognized for Store.', filter);
        }
    }
    return false;
}
function sortRecords(records, sortSpecifiers) {
    var comparisonValues = new Map();
    records.forEach(function (record) {
        comparisonValues.set(record, sortSpecifiers.map(function (sortSpecifier) {
            if (sortSpecifier.kind === 'attribute') {
                return utils_1.deepGet(record, ['attributes', sortSpecifier.attribute]);
            } else {
                throw new data_1.QueryExpressionParseError('Sort specifier ${sortSpecifier.kind} not recognized for Store.', sortSpecifier);
            }
        }));
    });
    var comparisonOrders = sortSpecifiers.map(function (sortExpression) {
        return sortExpression.order === 'descending' ? -1 : 1;
    });
    return records.sort(function (record1, record2) {
        var values1 = comparisonValues.get(record1);
        var values2 = comparisonValues.get(record2);
        for (var i = 0; i < sortSpecifiers.length; i++) {
            if (values1[i] < values2[i]) {
                return -comparisonOrders[i];
            } else if (values1[i] > values2[i]) {
                return comparisonOrders[i];
            } else if (utils_1.isNone(values1[i]) && !utils_1.isNone(values2[i])) {
                return comparisonOrders[i];
            } else if (utils_1.isNone(values2[i]) && !utils_1.isNone(values1[i])) {
                return -comparisonOrders[i];
            }
        }
        return 0;
    });
}
function paginateRecords(records, paginationOptions) {
    if (paginationOptions.limit !== undefined) {
        var offset = paginationOptions.offset === undefined ? 0 : paginationOptions.offset;
        var limit = paginationOptions.limit;
        return records.slice(offset, offset + limit);
    } else {
        throw new data_1.QueryExpressionParseError('Pagination options not recognized for Store. Please specify `offset` and `limit`.', paginationOptions);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,