"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("@orbit/data");
var utils_1 = require("@orbit/utils");
exports.default = {
    addRecord: function (cache, op) {
        var record = op.record;
        var records = cache.records(record.type);
        records.set(record.id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceRecord: function (cache, op) {
        var replacement = op.record;
        var type = replacement.type, id = replacement.id;
        var records = cache.records(type);
        var current = records.get(id);
        var record;
        if (current) {
            record = { type: type, id: id };
            ['attributes', 'keys', 'relationships'].forEach(function (grouping) {
                if (current[grouping] && replacement[grouping]) {
                    record[grouping] = utils_1.merge({}, current[grouping], replacement[grouping]);
                }
                else if (current[grouping]) {
                    record[grouping] = utils_1.merge({}, current[grouping]);
                }
                else if (replacement[grouping]) {
                    record[grouping] = utils_1.merge({}, replacement[grouping]);
                }
            });
        }
        else {
            record = replacement;
        }
        records.set(id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    removeRecord: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var result = records.get(id);
        if (result) {
            records.remove(id);
            return result;
        }
        else {
            return null;
        }
    },
    replaceKey: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
        }
        else {
            record = { type: type, id: id };
        }
        utils_1.deepSet(record, ['keys', op.key], op.value);
        records.set(id, record);
        if (cache.keyMap) {
            cache.keyMap.pushRecord(record);
        }
        return record;
    },
    replaceAttribute: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
        }
        else {
            record = { type: type, id: id };
        }
        utils_1.deepSet(record, ['attributes', op.attribute], op.value);
        records.set(id, record);
        return record;
    },
    addToRelatedRecords: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
        }
        else {
            record = { type: type, id: id };
        }
        var relatedRecords = utils_1.deepGet(record, ['relationships', op.relationship, 'data']) || [];
        relatedRecords.push(op.relatedRecord);
        utils_1.deepSet(record, ['relationships', op.relationship, 'data'], relatedRecords);
        records.set(id, record);
        return record;
    },
    removeFromRelatedRecords: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
            var relatedRecords = utils_1.deepGet(record, ['relationships', op.relationship, 'data']);
            if (relatedRecords) {
                relatedRecords = relatedRecords.filter(function (r) { return !data_1.equalRecordIdentities(r, op.relatedRecord); });
                if (utils_1.deepSet(record, ['relationships', op.relationship, 'data'], relatedRecords)) {
                    records.set(id, record);
                }
            }
            return record;
        }
        return null;
    },
    replaceRelatedRecords: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
        }
        else {
            record = { type: type, id: id };
        }
        if (utils_1.deepSet(record, ['relationships', op.relationship, 'data'], op.relatedRecords)) {
            records.set(id, record);
        }
        return record;
    },
    replaceRelatedRecord: function (cache, op) {
        var _a = op.record, type = _a.type, id = _a.id;
        var records = cache.records(type);
        var record = records.get(id);
        if (record) {
            record = utils_1.clone(record);
        }
        else {
            record = { type: type, id: id };
        }
        if (utils_1.deepSet(record, ['relationships', op.relationship, 'data'], op.relatedRecord)) {
            records.set(id, record);
        }
        return record;
    }
};
//# sourceMappingURL=data:application/json;base64,