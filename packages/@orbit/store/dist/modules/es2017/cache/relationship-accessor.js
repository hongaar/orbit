"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var data_1 = require("@orbit/data");
var immutable_1 = require("@orbit/immutable");
var record_identity_map_1 = require("./record-identity-map");
var RelationshipAccessor = (function () {
    function RelationshipAccessor(cache, base) {
        this._cache = cache;
        this.reset(base);
    }
    RelationshipAccessor.prototype.reset = function (base) {
        var relationships = {};
        Object.keys(this._cache.schema.models).forEach(function (type) {
            var baseRelationships = base && base._relationships[type];
            relationships[type] = new immutable_1.ImmutableMap(baseRelationships);
        });
        this._relationships = relationships;
    };
    RelationshipAccessor.prototype.relationshipExists = function (record, relationship, relatedRecord) {
        var rels = this._relationships[record.type].get(record.id);
        if (rels) {
            var rel = rels[relationship];
            if (rel) {
                if (rel instanceof record_identity_map_1.default) {
                    return rel.has(relatedRecord);
                }
                else {
                    return data_1.equalRecordIdentities(relatedRecord, rel);
                }
            }
        }
        return !relatedRecord;
    };
    RelationshipAccessor.prototype.relatedRecord = function (record, relationship) {
        var rels = this._relationships[record.type].get(record.id);
        if (rels) {
            return rels[relationship];
        }
    };
    RelationshipAccessor.prototype.relatedRecords = function (record, relationship) {
        var rels = this._relationships[record.type].get(record.id);
        var map = rels && rels[relationship];
        if (map) {
            return Array.from(map.values);
        }
    };
    RelationshipAccessor.prototype.relatedRecordsMap = function (record, relationship) {
        var rels = this._relationships[record.type].get(record.id);
        if (rels) {
            return rels[relationship];
        }
    };
    RelationshipAccessor.prototype.relatedRecordsMatch = function (record, relationship, relatedRecords) {
        var map = this.relatedRecordsMap(record, relationship);
        if (map) {
            var otherMap_1 = new record_identity_map_1.default;
            relatedRecords.forEach(function (id) { return otherMap_1.add(id); });
            return map.equals(otherMap_1);
        }
        else {
            return relatedRecords.length === 0;
        }
    };
    RelationshipAccessor.prototype.addRecord = function (record) {
        if (record.relationships) {
            var rels_1 = {};
            Object.keys(record.relationships).forEach(function (name) {
                var rel = record.relationships[name];
                if (rel.data !== undefined) {
                    if (utils_1.isArray(rel.data)) {
                        var relMap_1 = rels_1[name] = new record_identity_map_1.default();
                        rel.data.forEach(function (r) { return relMap_1.add(r); });
                    }
                    else {
                        rels_1[name] = rel.data;
                    }
                }
            });
            this._relationships[record.type].set(record.id, rels_1);
        }
    };
    RelationshipAccessor.prototype.replaceRecord = function (record) {
        this.addRecord(record);
    };
    RelationshipAccessor.prototype.clearRecord = function (record) {
        this._relationships[record.type].remove(record.id);
    };
    RelationshipAccessor.prototype.addToRelatedRecords = function (record, relationship, relatedRecord) {
        var currentRels = this._relationships[record.type].get(record.id);
        var rels = currentRels ? cloneRelationships(currentRels) : {};
        var rel = rels[relationship];
        if (!rel) {
            rel = rels[relationship] = new record_identity_map_1.default();
        }
        rel.add(relatedRecord);
        this._relationships[record.type].set(record.id, rels);
    };
    RelationshipAccessor.prototype.removeFromRelatedRecords = function (record, relationship, relatedRecord) {
        var currentRels = this._relationships[record.type].get(record.id);
        if (currentRels && currentRels[relationship]) {
            var rels = cloneRelationships(currentRels);
            var rel = rels[relationship];
            rel.remove(relatedRecord);
            this._relationships[record.type].set(record.id, rels);
        }
    };
    RelationshipAccessor.prototype.replaceRelatedRecords = function (record, relationship, relatedRecords) {
        var currentRels = this._relationships[record.type].get(record.id);
        var rels = currentRels ? cloneRelationships(currentRels) : {};
        var rel = rels[relationship];
        if (!rel) {
            rel = rels[relationship] = new record_identity_map_1.default();
        }
        relatedRecords.forEach(function (relatedRecord) { return rel.add(relatedRecord); });
        this._relationships[record.type].set(record.id, rels);
    };
    RelationshipAccessor.prototype.replaceRelatedRecord = function (record, relationship, relatedRecord) {
        var currentRels = this._relationships[record.type].get(record.id);
        if ((currentRels && currentRels[relationship]) || relatedRecord) {
            var rels = currentRels ? cloneRelationships(currentRels) : {};
            rels[relationship] = relatedRecord;
            this._relationships[record.type].set(record.id, rels);
        }
    };
    return RelationshipAccessor;
}());
exports.default = RelationshipAccessor;
function cloneRelationships(rels) {
    var clonedRels = {};
    if (rels) {
        Object.keys(rels).forEach(function (name) {
            var value = rels[name];
            if (value instanceof record_identity_map_1.default) {
                clonedRels[name] = new record_identity_map_1.default(value);
            }
            else {
                clonedRels[name] = value;
            }
        });
    }
    return clonedRels;
}
//# sourceMappingURL=data:application/json;base64,