"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var record_1 = require("./record");
var utils_1 = require("@orbit/utils");
function markOperationToDelete(operation) {
    var o = operation;
    o._deleted = true;
}
function isOperationMarkedToDelete(operation) {
    var o = operation;
    return o._deleted === true;
}
function mergeOperations(superceded, superceding, consecutiveOps) {
    if (record_1.equalRecordIdentities(superceded.record, superceding.record)) {
        if (superceding.op === 'removeRecord') {
            markOperationToDelete(superceded);
            if (superceded.op === 'addRecord') {
                markOperationToDelete(superceding);
            }
        } else if (!isOperationMarkedToDelete(superceding) && (consecutiveOps || superceding.op === 'replaceAttribute')) {
            if (isReplaceFieldOp(superceded.op) && isReplaceFieldOp(superceding.op)) {
                if (superceded.op === 'replaceAttribute' && superceding.op === 'replaceAttribute' && superceded.attribute === superceding.attribute) {
                    markOperationToDelete(superceded);
                } else if (superceded.op === 'replaceRelatedRecord' && superceding.op === 'replaceRelatedRecord' && superceded.relationship === superceding.relationship) {
                    markOperationToDelete(superceded);
                } else if (superceded.op === 'replaceRelatedRecords' && superceding.op === 'replaceRelatedRecords' && superceded.relationship === superceding.relationship) {
                    markOperationToDelete(superceded);
                } else {
                    if (superceded.op === 'replaceAttribute') {
                        updateRecordReplaceAttribute(superceded.record, superceded.attribute, superceded.value);
                        delete superceded.attribute;
                        delete superceded.value;
                    } else if (superceded.op === 'replaceRelatedRecord') {
                        updateRecordReplaceHasOne(superceded.record, superceded.relationship, superceded.relatedRecord);
                        delete superceded.relationship;
                        delete superceded.relatedRecord;
                    } else if (superceded.op === 'replaceRelatedRecords') {
                        updateRecordReplaceHasMany(superceded.record, superceded.relationship, superceded.relatedRecords);
                        delete superceded.relationship;
                        delete superceded.relatedRecords;
                    }
                    if (superceding.op === 'replaceAttribute') {
                        updateRecordReplaceAttribute(superceded.record, superceding.attribute, superceding.value);
                    } else if (superceding.op === 'replaceRelatedRecord') {
                        updateRecordReplaceHasOne(superceded.record, superceding.relationship, superceding.relatedRecord);
                    } else if (superceding.op === 'replaceRelatedRecords') {
                        updateRecordReplaceHasMany(superceded.record, superceding.relationship, superceding.relatedRecords);
                    }
                    superceded.op = 'replaceRecord';
                    markOperationToDelete(superceding);
                }
            } else if ((superceded.op === 'addRecord' || superceded.op === 'replaceRecord') && isReplaceFieldOp(superceding.op)) {
                if (superceding.op === 'replaceAttribute') {
                    updateRecordReplaceAttribute(superceded.record, superceding.attribute, superceding.value);
                } else if (superceding.op === 'replaceRelatedRecord') {
                    updateRecordReplaceHasOne(superceded.record, superceding.relationship, superceding.relatedRecord);
                } else if (superceding.op === 'replaceRelatedRecords') {
                    updateRecordReplaceHasMany(superceded.record, superceding.relationship, superceding.relatedRecords);
                }
                markOperationToDelete(superceding);
            } else if (superceding.op === 'addToRelatedRecords') {
                if (superceded.op === 'addRecord') {
                    updateRecordAddToHasMany(superceded.record, superceding.relationship, superceding.relatedRecord);
                    markOperationToDelete(superceding);
                } else if (superceded.op === 'replaceRecord') {
                    if (superceded.record.relationships && superceded.record.relationships[superceding.relationship] && superceded.record.relationships[superceding.relationship].data) {
                        updateRecordAddToHasMany(superceded.record, superceding.relationship, superceding.relatedRecord);
                        markOperationToDelete(superceding);
                    }
                }
            } else if (superceding.op === 'removeFromRelatedRecords') {
                if (superceded.op === 'addToRelatedRecords' && superceded.relationship === superceding.relationship && record_1.equalRecordIdentities(superceded.relatedRecord, superceding.relatedRecord)) {
                    markOperationToDelete(superceded);
                    markOperationToDelete(superceding);
                } else if (superceded.op === 'addRecord' || superceded.op === 'replaceRecord') {
                    if (superceded.record.relationships && superceded.record.relationships[superceding.relationship] && superceded.record.relationships[superceding.relationship].data) {
                        updateRecordRemoveFromHasMany(superceded.record, superceding.relationship, superceding.relatedRecord);
                        markOperationToDelete(superceding);
                    }
                }
            }
        }
    }
}
function isReplaceFieldOp(op) {
    return op === 'replaceAttribute' || op === 'replaceRelatedRecord' || op === 'replaceRelatedRecords';
}
function updateRecordReplaceAttribute(record, attribute, value) {
    record.attributes = record.attributes || {};
    record.attributes[attribute] = value;
}
function updateRecordReplaceHasOne(record, relationship, relatedRecord) {
    utils_1.deepSet(record, ['relationships', relationship, 'data'], record_1.cloneRecordIdentity(relatedRecord));
}
function updateRecordReplaceHasMany(record, relationship, relatedRecords) {
    utils_1.deepSet(record, ['relationships', relationship, 'data'], relatedRecords.map(record_1.cloneRecordIdentity));
}
function updateRecordAddToHasMany(record, relationship, relatedRecord) {
    var data = utils_1.deepGet(record, ['relationships', relationship, 'data']) || [];
    data.push(record_1.cloneRecordIdentity(relatedRecord));
    utils_1.deepSet(record, ['relationships', relationship, 'data'], data);
}
function updateRecordRemoveFromHasMany(record, relationship, relatedRecord) {
    var data = utils_1.deepGet(record, ['relationships', relationship, 'data']);
    if (data) {
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            if (record_1.equalRecordIdentities(r, relatedRecord)) {
                data.splice(i, 1);
                break;
            }
        }
    }
}
/**
 * Coalesces operations into a minimal set of equivalent operations.
 *
 * This method respects the order of the operations array and does not allow
 * reordering of operations that affect relationships.
 *
 * @export
 * @param {RecordOperation[]} operations
 * @returns {RecordOperation[]}
 */
function coalesceRecordOperations(operations) {
    for (var i = 0, l = operations.length; i < l; i++) {
        var currentOp = operations[i];
        var consecutiveOps = true;
        for (var j = i + 1; j < l; j++) {
            var nextOp = operations[j];
            mergeOperations(currentOp, nextOp, consecutiveOps);
            if (isOperationMarkedToDelete(currentOp)) {
                break;
            } else if (!isOperationMarkedToDelete(nextOp)) {
                consecutiveOps = false;
            }
        }
    }
    return operations.filter(function (o) {
        return !isOperationMarkedToDelete(o);
    });
}
exports.coalesceRecordOperations = coalesceRecordOperations;
/**
 * Determine the differences between a record and its updated version in terms
 * of a set of operations.
 *
 * @export
 * @param {Record} record
 * @param {Record} updatedRecord
 * @returns {RecordOperation[]}
 */
function recordDiffs(record, updatedRecord) {
    var diffs = [];
    if (record && updatedRecord) {
        var recordIdentity_1 = record_1.cloneRecordIdentity(record);
        if (updatedRecord.attributes) {
            Object.keys(updatedRecord.attributes).forEach(function (attribute) {
                var value = updatedRecord.attributes[attribute];
                if (record.attributes === undefined || !utils_1.eq(record.attributes[attribute], value)) {
                    var op = {
                        op: 'replaceAttribute',
                        record: recordIdentity_1,
                        attribute: attribute,
                        value: value
                    };
                    diffs.push(op);
                }
            });
        }
        if (updatedRecord.keys) {
            Object.keys(updatedRecord.keys).forEach(function (key) {
                var value = updatedRecord.keys[key];
                if (record.keys === undefined || !utils_1.eq(record.keys[key], value)) {
                    var op = {
                        op: 'replaceKey',
                        record: recordIdentity_1,
                        key: key,
                        value: value
                    };
                    diffs.push(op);
                }
            });
        }
        // TODO - handle relationships
    }
    return diffs;
}
exports.recordDiffs = recordDiffs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL29wZXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1QkFBOEY7QUFDOUYsc0JBQW9EO0FBbUpwRCwrQkFBK0IsQUFBb0I7QUFDakQsUUFBTSxBQUFDLElBQVEsQUFBUyxBQUFDO0FBQ3pCLEFBQUMsTUFBQyxBQUFRLFdBQUcsQUFBSSxBQUFDLEFBQ3BCO0FBQUM7QUFFRCxtQ0FBbUMsQUFBb0I7QUFDckQsUUFBTSxBQUFDLElBQVEsQUFBUyxBQUFDO0FBQ3pCLEFBQU0sV0FBQyxBQUFDLEVBQUMsQUFBUSxhQUFLLEFBQUksQUFBQyxBQUM3QjtBQUFDO0FBRUQseUJBQXlCLEFBQTJCLFlBQUUsQUFBNEIsYUFBRSxBQUF1QjtBQUN6RyxBQUFFLEFBQUMsUUFBQyxTQUFxQixzQkFBQyxBQUFVLFdBQUMsQUFBTSxRQUFFLEFBQVcsWUFBQyxBQUFNLEFBQUMsQUFBQyxTQUFDLEFBQUM7QUFDakUsQUFBRSxBQUFDLFlBQUMsQUFBVyxZQUFDLEFBQUUsT0FBSyxBQUFjLEFBQUMsZ0JBQUMsQUFBQztBQUN0QyxBQUFxQixrQ0FBQyxBQUFVLEFBQUMsQUFBQztBQUNsQyxBQUFFLEFBQUMsZ0JBQUMsQUFBVSxXQUFDLEFBQUUsT0FBSyxBQUFXLEFBQUMsYUFBQyxBQUFDO0FBQ2xDLEFBQXFCLHNDQUFDLEFBQVcsQUFBQyxBQUFDLEFBQ3JDO0FBQUMsQUFDSDtBQUFDLEFBQUMsQUFBSSxlQUFDLEFBQUUsQUFBQyxJQUFDLENBQUMsQUFBeUIsMEJBQUMsQUFBVyxBQUFDLEFBQUksaUJBQUMsQUFBYyxrQkFBSSxBQUFXLFlBQUMsQUFBRSxPQUFLLEFBQWtCLEFBQUMsQUFBQyxxQkFBQyxBQUFDO0FBQ2hILEFBQUUsQUFBQyxnQkFBQyxBQUFnQixpQkFBQyxBQUFVLFdBQUMsQUFBRSxBQUFDLE9BQUksQUFBZ0IsaUJBQUMsQUFBVyxZQUFDLEFBQUUsQUFBQyxBQUFDLEtB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SCxBQUFLLCtCQUFBLEFBQ047QUFMNkI7QUFPOUIsQUFBSywwQkFBQyxBQUFJLEtBQUMsQUFBRSxBQUFDLEFBQUMsQUFDakI7QUFBQyxBQUNIO0FBQUMsQUFBQyxBQUFDLEFBQ0w7QUFBQztBQUVELEFBQThCLEFBQ2hDO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQTNDRCxzQkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWNvcmQsIFJlY29yZElkZW50aXR5LCBjbG9uZVJlY29yZElkZW50aXR5LCBlcXVhbFJlY29yZElkZW50aXRpZXMgfSBmcm9tICcuL3JlY29yZCc7XHJcbmltcG9ydCB7IGVxLCBkZWVwR2V0LCBkZWVwU2V0IH0gZnJvbSAnQG9yYml0L3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBCYXNlIE9wZXJhdGlvbiBpbnRlcmZhY2UsIHdoaWNoIHJlcXVpcmVzIGp1c3QgYW4gYG9wYCBzdHJpbmcuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGludGVyZmFjZSBPcGVyYXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3BlcmF0aW9uIHtcclxuICBvcDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHJlY29yZCBvcGVyYXRpb24uXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGludGVyZmFjZSBBZGRSZWNvcmRPcGVyYXRpb25cclxuICogQGV4dGVuZHMge09wZXJhdGlvbn1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkUmVjb3JkT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uIHtcclxuICBvcDogJ2FkZFJlY29yZCc7XHJcbiAgcmVjb3JkOiBSZWNvcmQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXBsYWNlIHJlY29yZCBvcGVyYXRpb24uXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQGludGVyZmFjZSBSZXBsYWNlUmVjb3JkT3BlcmF0aW9uXHJcbiAqIEBleHRlbmRzIHtPcGVyYXRpb259XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxhY2VSZWNvcmRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIG9wOiAncmVwbGFjZVJlY29yZCc7XHJcbiAgcmVjb3JkOiBSZWNvcmQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgcmVjb3JkIG9wZXJhdGlvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAaW50ZXJmYWNlIFJlbW92ZVJlY29yZE9wZXJhdGlvblxyXG4gKiBAZXh0ZW5kcyB7T3BlcmF0aW9ufVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZW1vdmVSZWNvcmRPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIG9wOiAncmVtb3ZlUmVjb3JkJztcclxuICByZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG59XHJcblxyXG4vKipcclxuICogUmVwbGFjZSBrZXkgb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBpbnRlcmZhY2UgUmVwbGFjZUtleU9wZXJhdGlvblxyXG4gKiBAZXh0ZW5kcyB7T3BlcmF0aW9ufVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXBsYWNlS2V5T3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uIHtcclxuICBvcDogJ3JlcGxhY2VLZXknO1xyXG4gIHJlY29yZDogUmVjb3JkSWRlbnRpdHk7XHJcbiAga2V5OiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcGxhY2UgYXR0cmlidXRlIG9wZXJhdGlvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAaW50ZXJmYWNlIFJlcGxhY2VBdHRyaWJ1dGVPcGVyYXRpb25cclxuICogQGV4dGVuZHMge09wZXJhdGlvbn1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVwbGFjZUF0dHJpYnV0ZU9wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgb3A6ICdyZXBsYWNlQXR0cmlidXRlJztcclxuICByZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG4gIGF0dHJpYnV0ZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdG8gaGFzLW1hbnkgcmVsYXRpb25zaGlwIG9wZXJhdGlvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAaW50ZXJmYWNlIEFkZFRvUmVsYXRlZFJlY29yZHNPcGVyYXRpb25cclxuICogQGV4dGVuZHMge09wZXJhdGlvbn1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWRkVG9SZWxhdGVkUmVjb3Jkc09wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgb3A6ICdhZGRUb1JlbGF0ZWRSZWNvcmRzJztcclxuICByZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG4gIHJlbGF0aW9uc2hpcDogc3RyaW5nO1xyXG4gIHJlbGF0ZWRSZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIGZyb20gaGFzLW1hbnkgcmVsYXRpb25zaGlwIG9wZXJhdGlvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAaW50ZXJmYWNlIFJlbW92ZUZyb21SZWxhdGVkUmVjb3Jkc09wZXJhdGlvblxyXG4gKiBAZXh0ZW5kcyB7T3BlcmF0aW9ufVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZW1vdmVGcm9tUmVsYXRlZFJlY29yZHNPcGVyYXRpb24gZXh0ZW5kcyBPcGVyYXRpb24ge1xyXG4gIG9wOiAncmVtb3ZlRnJvbVJlbGF0ZWRSZWNvcmRzJztcclxuICByZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG4gIHJlbGF0aW9uc2hpcDogc3RyaW5nO1xyXG4gIHJlbGF0ZWRSZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG59XHJcblxyXG4vKipcclxuICogUmVwbGFjZSBoYXMtbWFueSByZWxhdGlvbnNoaXAgb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBpbnRlcmZhY2UgUmVwbGFjZVJlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uXHJcbiAqIEBleHRlbmRzIHtPcGVyYXRpb259XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxhY2VSZWxhdGVkUmVjb3Jkc09wZXJhdGlvbiBleHRlbmRzIE9wZXJhdGlvbiB7XHJcbiAgb3A6ICdyZXBsYWNlUmVsYXRlZFJlY29yZHMnO1xyXG4gIHJlY29yZDogUmVjb3JkSWRlbnRpdHk7XHJcbiAgcmVsYXRpb25zaGlwOiBzdHJpbmc7XHJcbiAgcmVsYXRlZFJlY29yZHM6IFJlY29yZElkZW50aXR5W107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXBsYWNlIGhhcy1vbmUgcmVsYXRpb25zaGlwIG9wZXJhdGlvbi5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAaW50ZXJmYWNlIFJlcGxhY2VSZWxhdGVkUmVjb3JkT3BlcmF0aW9uXHJcbiAqIEBleHRlbmRzIHtPcGVyYXRpb259XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxhY2VSZWxhdGVkUmVjb3JkT3BlcmF0aW9uIGV4dGVuZHMgT3BlcmF0aW9uIHtcclxuICBvcDogJ3JlcGxhY2VSZWxhdGVkUmVjb3JkJztcclxuICByZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG4gIHJlbGF0aW9uc2hpcDogc3RyaW5nO1xyXG4gIHJlbGF0ZWRSZWNvcmQ6IFJlY29yZElkZW50aXR5O1xyXG59XHJcblxyXG4vKipcclxuICogVW5pb24gb2YgYWxsIHJlY29yZC1yZWxhdGVkIG9wZXJhdGlvbnMuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICovXHJcbmV4cG9ydCB0eXBlIFJlY29yZE9wZXJhdGlvbiA9IEFkZFJlY29yZE9wZXJhdGlvbiB8XHJcbiAgUmVwbGFjZVJlY29yZE9wZXJhdGlvbiB8XHJcbiAgUmVtb3ZlUmVjb3JkT3BlcmF0aW9uIHxcclxuICBSZXBsYWNlS2V5T3BlcmF0aW9uIHxcclxuICBSZXBsYWNlQXR0cmlidXRlT3BlcmF0aW9uIHxcclxuICBBZGRUb1JlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uIHxcclxuICBSZW1vdmVGcm9tUmVsYXRlZFJlY29yZHNPcGVyYXRpb24gfFxyXG4gIFJlcGxhY2VSZWxhdGVkUmVjb3Jkc09wZXJhdGlvbiB8XHJcbiAgUmVwbGFjZVJlbGF0ZWRSZWNvcmRPcGVyYXRpb247XHJcblxyXG5mdW5jdGlvbiBtYXJrT3BlcmF0aW9uVG9EZWxldGUob3BlcmF0aW9uOiBPcGVyYXRpb24pOiB2b2lkIHtcclxuICBjb25zdCBvOiBhbnkgPSBvcGVyYXRpb247XHJcbiAgby5fZGVsZXRlZCA9IHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT3BlcmF0aW9uTWFya2VkVG9EZWxldGUob3BlcmF0aW9uOiBPcGVyYXRpb24pOiBib29sZWFuIHtcclxuICBjb25zdCBvOiBhbnkgPSBvcGVyYXRpb247XHJcbiAgcmV0dXJuIG8uX2RlbGV0ZWQgPT09IHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlT3BlcmF0aW9ucyhzdXBlcmNlZGVkOiBSZWNvcmRPcGVyYXRpb24sIHN1cGVyY2VkaW5nOiBSZWNvcmRPcGVyYXRpb24sIGNvbnNlY3V0aXZlT3BzOiBib29sZWFuKTogdm9pZCB7XHJcbiAgaWYgKGVxdWFsUmVjb3JkSWRlbnRpdGllcyhzdXBlcmNlZGVkLnJlY29yZCwgc3VwZXJjZWRpbmcucmVjb3JkKSkge1xyXG4gICAgaWYgKHN1cGVyY2VkaW5nLm9wID09PSAncmVtb3ZlUmVjb3JkJykge1xyXG4gICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRlZCk7XHJcbiAgICAgIGlmIChzdXBlcmNlZGVkLm9wID09PSAnYWRkUmVjb3JkJykge1xyXG4gICAgICAgIG1hcmtPcGVyYXRpb25Ub0RlbGV0ZShzdXBlcmNlZGluZyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIWlzT3BlcmF0aW9uTWFya2VkVG9EZWxldGUoc3VwZXJjZWRpbmcpICYmIChjb25zZWN1dGl2ZU9wcyB8fCBzdXBlcmNlZGluZy5vcCA9PT0gJ3JlcGxhY2VBdHRyaWJ1dGUnKSkge1xyXG4gICAgICBpZiAoaXNSZXBsYWNlRmllbGRPcChzdXBlcmNlZGVkLm9wKSAmJiBpc1JlcGxhY2VGaWVsZE9wKHN1cGVyY2VkaW5nLm9wKSkge1xyXG4gICAgICAgIGlmIChzdXBlcmNlZGVkLm9wID09PSAncmVwbGFjZUF0dHJpYnV0ZScgJiZcclxuICAgICAgICAgICAgc3VwZXJjZWRpbmcub3AgPT09ICdyZXBsYWNlQXR0cmlidXRlJyAmJlxyXG4gICAgICAgICAgICBzdXBlcmNlZGVkLmF0dHJpYnV0ZSA9PT0gc3VwZXJjZWRpbmcuYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRlZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdXBlcmNlZGVkLm9wID09PSAncmVwbGFjZVJlbGF0ZWRSZWNvcmQnICYmXHJcbiAgICAgICAgICAgIHN1cGVyY2VkaW5nLm9wID09PSAncmVwbGFjZVJlbGF0ZWRSZWNvcmQnICYmXHJcbiAgICAgICAgICAgIHN1cGVyY2VkZWQucmVsYXRpb25zaGlwID09PSBzdXBlcmNlZGluZy5yZWxhdGlvbnNoaXApIHtcclxuICAgICAgICAgIG1hcmtPcGVyYXRpb25Ub0RlbGV0ZShzdXBlcmNlZGVkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHN1cGVyY2VkZWQub3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZHMnICYmXHJcbiAgICAgICAgICAgIHN1cGVyY2VkaW5nLm9wID09PSAncmVwbGFjZVJlbGF0ZWRSZWNvcmRzJyAmJlxyXG4gICAgICAgICAgICBzdXBlcmNlZGVkLnJlbGF0aW9uc2hpcCA9PT0gc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwKSB7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRlZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChzdXBlcmNlZGVkLm9wID09PSAncmVwbGFjZUF0dHJpYnV0ZScpIHtcclxuICAgICAgICAgICAgdXBkYXRlUmVjb3JkUmVwbGFjZUF0dHJpYnV0ZShzdXBlcmNlZGVkLnJlY29yZCwgc3VwZXJjZWRlZC5hdHRyaWJ1dGUsIHN1cGVyY2VkZWQudmFsdWUpO1xyXG4gICAgICAgICAgICBkZWxldGUgc3VwZXJjZWRlZC5hdHRyaWJ1dGU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzdXBlcmNlZGVkLnZhbHVlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzdXBlcmNlZGVkLm9wID09PSAncmVwbGFjZVJlbGF0ZWRSZWNvcmQnKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNPbmUoc3VwZXJjZWRlZC5yZWNvcmQsIHN1cGVyY2VkZWQucmVsYXRpb25zaGlwLCBzdXBlcmNlZGVkLnJlbGF0ZWRSZWNvcmQpO1xyXG4gICAgICAgICAgICBkZWxldGUgc3VwZXJjZWRlZC5yZWxhdGlvbnNoaXA7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzdXBlcmNlZGVkLnJlbGF0ZWRSZWNvcmQ7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1cGVyY2VkZWQub3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZHMnKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNNYW55KHN1cGVyY2VkZWQucmVjb3JkLCBzdXBlcmNlZGVkLnJlbGF0aW9uc2hpcCwgc3VwZXJjZWRlZC5yZWxhdGVkUmVjb3Jkcyk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzdXBlcmNlZGVkLnJlbGF0aW9uc2hpcDtcclxuICAgICAgICAgICAgZGVsZXRlIHN1cGVyY2VkZWQucmVsYXRlZFJlY29yZHM7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc3VwZXJjZWRpbmcub3AgPT09ICdyZXBsYWNlQXR0cmlidXRlJykge1xyXG4gICAgICAgICAgICB1cGRhdGVSZWNvcmRSZXBsYWNlQXR0cmlidXRlKHN1cGVyY2VkZWQucmVjb3JkLCBzdXBlcmNlZGluZy5hdHRyaWJ1dGUsIHN1cGVyY2VkaW5nLnZhbHVlKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRpbmcub3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZCcpIHtcclxuICAgICAgICAgICAgdXBkYXRlUmVjb3JkUmVwbGFjZUhhc09uZShzdXBlcmNlZGVkLnJlY29yZCwgc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwLCBzdXBlcmNlZGluZy5yZWxhdGVkUmVjb3JkKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRpbmcub3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZHMnKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNNYW55KHN1cGVyY2VkZWQucmVjb3JkLCBzdXBlcmNlZGluZy5yZWxhdGlvbnNoaXAsIHN1cGVyY2VkaW5nLnJlbGF0ZWRSZWNvcmRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN1cGVyY2VkZWQub3AgPSAncmVwbGFjZVJlY29yZCc7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICgoc3VwZXJjZWRlZC5vcCA9PT0gJ2FkZFJlY29yZCcgfHwgc3VwZXJjZWRlZC5vcCA9PT0gJ3JlcGxhY2VSZWNvcmQnKSAmJlxyXG4gICAgICAgICAgICAgICAgIGlzUmVwbGFjZUZpZWxkT3Aoc3VwZXJjZWRpbmcub3ApKSB7XHJcbiAgICAgICAgaWYgKHN1cGVyY2VkaW5nLm9wID09PSAncmVwbGFjZUF0dHJpYnV0ZScpIHtcclxuICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VBdHRyaWJ1dGUoc3VwZXJjZWRlZC5yZWNvcmQsIHN1cGVyY2VkaW5nLmF0dHJpYnV0ZSwgc3VwZXJjZWRpbmcudmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRpbmcub3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZCcpIHtcclxuICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNPbmUoc3VwZXJjZWRlZC5yZWNvcmQsIHN1cGVyY2VkaW5nLnJlbGF0aW9uc2hpcCwgc3VwZXJjZWRpbmcucmVsYXRlZFJlY29yZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdXBlcmNlZGluZy5vcCA9PT0gJ3JlcGxhY2VSZWxhdGVkUmVjb3JkcycpIHtcclxuICAgICAgICAgIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNNYW55KHN1cGVyY2VkZWQucmVjb3JkLCBzdXBlcmNlZGluZy5yZWxhdGlvbnNoaXAsIHN1cGVyY2VkaW5nLnJlbGF0ZWRSZWNvcmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFya09wZXJhdGlvblRvRGVsZXRlKHN1cGVyY2VkaW5nKTtcclxuICAgICAgfSBlbHNlIGlmIChzdXBlcmNlZGluZy5vcCA9PT0gJ2FkZFRvUmVsYXRlZFJlY29yZHMnKSB7XHJcbiAgICAgICAgaWYgKHN1cGVyY2VkZWQub3AgPT09ICdhZGRSZWNvcmQnKSB7XHJcbiAgICAgICAgICB1cGRhdGVSZWNvcmRBZGRUb0hhc01hbnkoc3VwZXJjZWRlZC5yZWNvcmQsIHN1cGVyY2VkaW5nLnJlbGF0aW9uc2hpcCwgc3VwZXJjZWRpbmcucmVsYXRlZFJlY29yZCk7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRpbmcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRlZC5vcCA9PT0gJ3JlcGxhY2VSZWNvcmQnKSB7XHJcbiAgICAgICAgICBpZiAoc3VwZXJjZWRlZC5yZWNvcmQucmVsYXRpb25zaGlwcyAmJlxyXG4gICAgICAgICAgICAgIHN1cGVyY2VkZWQucmVjb3JkLnJlbGF0aW9uc2hpcHNbc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwXSAmJlxyXG4gICAgICAgICAgICAgIHN1cGVyY2VkZWQucmVjb3JkLnJlbGF0aW9uc2hpcHNbc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwXS5kYXRhKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlY29yZEFkZFRvSGFzTWFueShzdXBlcmNlZGVkLnJlY29yZCwgc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwLCBzdXBlcmNlZGluZy5yZWxhdGVkUmVjb3JkKTtcclxuICAgICAgICAgICAgbWFya09wZXJhdGlvblRvRGVsZXRlKHN1cGVyY2VkaW5nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRpbmcub3AgPT09ICdyZW1vdmVGcm9tUmVsYXRlZFJlY29yZHMnKSB7XHJcbiAgICAgICAgaWYgKHN1cGVyY2VkZWQub3AgPT09ICdhZGRUb1JlbGF0ZWRSZWNvcmRzJyAmJlxyXG4gICAgICAgICAgICBzdXBlcmNlZGVkLnJlbGF0aW9uc2hpcCA9PT0gc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwICYmXHJcbiAgICAgICAgICAgIGVxdWFsUmVjb3JkSWRlbnRpdGllcyhzdXBlcmNlZGVkLnJlbGF0ZWRSZWNvcmQsIHN1cGVyY2VkaW5nLnJlbGF0ZWRSZWNvcmQpKSB7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRlZCk7XHJcbiAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRpbmcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwZXJjZWRlZC5vcCA9PT0gJ2FkZFJlY29yZCcgfHwgc3VwZXJjZWRlZC5vcCA9PT0gJ3JlcGxhY2VSZWNvcmQnKSB7XHJcbiAgICAgICAgICBpZiAoc3VwZXJjZWRlZC5yZWNvcmQucmVsYXRpb25zaGlwcyAmJlxyXG4gICAgICAgICAgICAgIHN1cGVyY2VkZWQucmVjb3JkLnJlbGF0aW9uc2hpcHNbc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwXSAmJlxyXG4gICAgICAgICAgICAgIHN1cGVyY2VkZWQucmVjb3JkLnJlbGF0aW9uc2hpcHNbc3VwZXJjZWRpbmcucmVsYXRpb25zaGlwXS5kYXRhKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVJlY29yZFJlbW92ZUZyb21IYXNNYW55KHN1cGVyY2VkZWQucmVjb3JkLCBzdXBlcmNlZGluZy5yZWxhdGlvbnNoaXAsIHN1cGVyY2VkaW5nLnJlbGF0ZWRSZWNvcmQpO1xyXG4gICAgICAgICAgICBtYXJrT3BlcmF0aW9uVG9EZWxldGUoc3VwZXJjZWRpbmcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNSZXBsYWNlRmllbGRPcChvcDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChvcCA9PT0gJ3JlcGxhY2VBdHRyaWJ1dGUnIHx8XHJcbiAgICAgICAgICBvcCA9PT0gJ3JlcGxhY2VSZWxhdGVkUmVjb3JkJyB8fFxyXG4gICAgICAgICAgb3AgPT09ICdyZXBsYWNlUmVsYXRlZFJlY29yZHMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVjb3JkUmVwbGFjZUF0dHJpYnV0ZShyZWNvcmQ6IFJlY29yZCwgYXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICByZWNvcmQuYXR0cmlidXRlcyA9IHJlY29yZC5hdHRyaWJ1dGVzIHx8IHt9O1xyXG4gIHJlY29yZC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVjb3JkUmVwbGFjZUhhc09uZShyZWNvcmQ6IFJlY29yZCwgcmVsYXRpb25zaGlwOiBzdHJpbmcsIHJlbGF0ZWRSZWNvcmQ6IFJlY29yZElkZW50aXR5KSB7XHJcbiAgZGVlcFNldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIHJlbGF0aW9uc2hpcCwgJ2RhdGEnXSwgY2xvbmVSZWNvcmRJZGVudGl0eShyZWxhdGVkUmVjb3JkKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVJlY29yZFJlcGxhY2VIYXNNYW55KHJlY29yZDogUmVjb3JkLCByZWxhdGlvbnNoaXA6IHN0cmluZywgcmVsYXRlZFJlY29yZHM6IFJlY29yZElkZW50aXR5W10pIHtcclxuICBkZWVwU2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgcmVsYXRpb25zaGlwLCAnZGF0YSddLCByZWxhdGVkUmVjb3Jkcy5tYXAoY2xvbmVSZWNvcmRJZGVudGl0eSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVSZWNvcmRBZGRUb0hhc01hbnkocmVjb3JkOiBSZWNvcmQsIHJlbGF0aW9uc2hpcDogc3RyaW5nLCByZWxhdGVkUmVjb3JkOiBSZWNvcmRJZGVudGl0eSkge1xyXG4gIGNvbnN0IGRhdGEgPSBkZWVwR2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgcmVsYXRpb25zaGlwLCAnZGF0YSddKSB8fCBbXTtcclxuICBkYXRhLnB1c2goY2xvbmVSZWNvcmRJZGVudGl0eShyZWxhdGVkUmVjb3JkKSk7XHJcbiAgZGVlcFNldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIHJlbGF0aW9uc2hpcCwgJ2RhdGEnXSwgZGF0YSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVJlY29yZFJlbW92ZUZyb21IYXNNYW55KHJlY29yZDogUmVjb3JkLCByZWxhdGlvbnNoaXA6IHN0cmluZywgcmVsYXRlZFJlY29yZDogUmVjb3JkSWRlbnRpdHkpIHtcclxuICBjb25zdCBkYXRhID0gZGVlcEdldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIHJlbGF0aW9uc2hpcCwgJ2RhdGEnXSkgYXMgUmVjb3JkSWRlbnRpdHlbXTtcclxuICBpZiAoZGF0YSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICBsZXQgciA9IGRhdGFbaV07XHJcbiAgICAgIGlmIChlcXVhbFJlY29yZElkZW50aXRpZXMociwgcmVsYXRlZFJlY29yZCkpIHtcclxuICAgICAgICBkYXRhLnNwbGljZShpLCAxKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvYWxlc2NlcyBvcGVyYXRpb25zIGludG8gYSBtaW5pbWFsIHNldCBvZiBlcXVpdmFsZW50IG9wZXJhdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgbWV0aG9kIHJlc3BlY3RzIHRoZSBvcmRlciBvZiB0aGUgb3BlcmF0aW9ucyBhcnJheSBhbmQgZG9lcyBub3QgYWxsb3dcclxuICogcmVvcmRlcmluZyBvZiBvcGVyYXRpb25zIHRoYXQgYWZmZWN0IHJlbGF0aW9uc2hpcHMuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtSZWNvcmRPcGVyYXRpb25bXX0gb3BlcmF0aW9uc1xyXG4gKiBAcmV0dXJucyB7UmVjb3JkT3BlcmF0aW9uW119XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29hbGVzY2VSZWNvcmRPcGVyYXRpb25zKG9wZXJhdGlvbnM6IFJlY29yZE9wZXJhdGlvbltdKTogUmVjb3JkT3BlcmF0aW9uW10ge1xyXG4gIGZvciAobGV0IGkgPSAwLCBsID0gb3BlcmF0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIGxldCBjdXJyZW50T3AgPSBvcGVyYXRpb25zW2ldO1xyXG4gICAgbGV0IGNvbnNlY3V0aXZlT3BzID0gdHJ1ZTtcclxuXHJcbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBsOyBqKyspIHtcclxuICAgICAgbGV0IG5leHRPcCA9IG9wZXJhdGlvbnNbal07XHJcblxyXG4gICAgICBtZXJnZU9wZXJhdGlvbnMoY3VycmVudE9wLCBuZXh0T3AsIGNvbnNlY3V0aXZlT3BzKTtcclxuXHJcbiAgICAgIGlmIChpc09wZXJhdGlvbk1hcmtlZFRvRGVsZXRlKGN1cnJlbnRPcCkpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfSBlbHNlIGlmICghaXNPcGVyYXRpb25NYXJrZWRUb0RlbGV0ZShuZXh0T3ApKSB7XHJcbiAgICAgICAgY29uc2VjdXRpdmVPcHMgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9wZXJhdGlvbnMuZmlsdGVyKG8gPT4gIWlzT3BlcmF0aW9uTWFya2VkVG9EZWxldGUobykpO1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGEgcmVjb3JkIGFuZCBpdHMgdXBkYXRlZCB2ZXJzaW9uIGluIHRlcm1zXHJcbiAqIG9mIGEgc2V0IG9mIG9wZXJhdGlvbnMuXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtSZWNvcmR9IHJlY29yZFxyXG4gKiBAcGFyYW0ge1JlY29yZH0gdXBkYXRlZFJlY29yZFxyXG4gKiBAcmV0dXJucyB7UmVjb3JkT3BlcmF0aW9uW119XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkRGlmZnMocmVjb3JkOiBSZWNvcmQsIHVwZGF0ZWRSZWNvcmQ6IFJlY29yZCk6IFJlY29yZE9wZXJhdGlvbltdIHtcclxuICBjb25zdCBkaWZmczogUmVjb3JkT3BlcmF0aW9uW10gPSBbXTtcclxuXHJcbiAgaWYgKHJlY29yZCAmJiB1cGRhdGVkUmVjb3JkKSB7XHJcbiAgICBjb25zdCByZWNvcmRJZGVudGl0eSA9IGNsb25lUmVjb3JkSWRlbnRpdHkocmVjb3JkKTtcclxuXHJcbiAgICBpZiAodXBkYXRlZFJlY29yZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKHVwZGF0ZWRSZWNvcmQuYXR0cmlidXRlcykuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IHVwZGF0ZWRSZWNvcmQuYXR0cmlidXRlc1thdHRyaWJ1dGVdO1xyXG5cclxuICAgICAgICBpZiAocmVjb3JkLmF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCB8fCAhZXEocmVjb3JkLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSwgdmFsdWUpKSB7XHJcbiAgICAgICAgICBsZXQgb3A6IFJlcGxhY2VBdHRyaWJ1dGVPcGVyYXRpb24gPSB7XHJcbiAgICAgICAgICAgIG9wOiAncmVwbGFjZUF0dHJpYnV0ZScsXHJcbiAgICAgICAgICAgIHJlY29yZDogcmVjb3JkSWRlbnRpdHksXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkaWZmcy5wdXNoKG9wKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh1cGRhdGVkUmVjb3JkLmtleXMpIHtcclxuICAgICAgT2JqZWN0LmtleXModXBkYXRlZFJlY29yZC5rZXlzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdXBkYXRlZFJlY29yZC5rZXlzW2tleV07XHJcbiAgICAgICAgaWYgKHJlY29yZC5rZXlzID09PSB1bmRlZmluZWQgfHwgIWVxKHJlY29yZC5rZXlzW2tleV0sIHZhbHVlKSkge1xyXG4gICAgICAgICAgbGV0IG9wOiBSZXBsYWNlS2V5T3BlcmF0aW9uID0ge1xyXG4gICAgICAgICAgICBvcDogJ3JlcGxhY2VLZXknLFxyXG4gICAgICAgICAgICByZWNvcmQ6IHJlY29yZElkZW50aXR5LFxyXG4gICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZGlmZnMucHVzaChvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPIC0gaGFuZGxlIHJlbGF0aW9uc2hpcHNcclxuICB9XHJcblxyXG4gIHJldHVybiBkaWZmcztcclxufVxyXG4iXX0=