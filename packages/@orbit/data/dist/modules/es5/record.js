"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
function cloneRecordIdentity(identity) {
    var type = identity.type,
        id = identity.id;
    return { type: type, id: id };
}
exports.cloneRecordIdentity = cloneRecordIdentity;
function equalRecordIdentities(record1, record2) {
    return utils_1.isNone(record1) && utils_1.isNone(record2) || utils_1.isObject(record1) && utils_1.isObject(record2) && record1.type === record2.type && record1.id === record2.id;
}
exports.equalRecordIdentities = equalRecordIdentities;
function mergeRecords(current, updates) {
    if (current) {
        var record_1 = cloneRecordIdentity(current);
        ['attributes', 'keys', 'relationships'].forEach(function (grouping) {
            if (current[grouping] && updates[grouping]) {
                record_1[grouping] = utils_1.merge({}, current[grouping], updates[grouping]);
            } else if (current[grouping]) {
                record_1[grouping] = utils_1.merge({}, current[grouping]);
            } else if (updates[grouping]) {
                record_1[grouping] = utils_1.merge({}, updates[grouping]);
            }
        });
        return record_1;
    } else {
        return updates;
    }
}
exports.mergeRecords = mergeRecords;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3JlY29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQkFBNkQ7QUEyQjdELDZCQUFvQyxBQUF3QjtBQUNsRCxRQUFBLGdCQUFJO1FBQUUsY0FBRSxBQUFjO0FBQzlCLEFBQU0sV0FBQyxFQUFFLEFBQUksTUFBQSxNQUFFLEFBQUUsSUFBQSxBQUFFLEFBQUMsQUFDdEI7QUFBQztBQUhELDhCQUdDO0FBRUQsK0JBQXNDLEFBQXVCLFNBQUUsQUFBdUI7QUFDcEYsQUFBTSxXQUFFLFFBQU0sT0FBQyxBQUFPLEFBQUMsWUFBSSxRQUFNLE9BQUMsQUFBTyxBQUFDLEFBQUMsQUFDcEMsUUFEQSxJQUNDLFFBQVEsU0FBQyxBQUFPLEFBQUMsWUFBSSxRQUFRLFNBQUMsQUFBTyxBQUFDLFlBQ3RDLEFBQU8sUUFBQyxBQUFJLFNBQUssQUFBTyxRQUFDLEFBQUksUUFDN0IsQUFBTyxRQUFDLEFBQUUsT0FBSyxBQUFPLFFBQUMsQUFBRSxBQUFDLEFBQUMsQUFDckM7QUFBQztBQUxELGdDQUtDO0FBRUQsc0JBQTZCLEFBQXNCLFNBQUUsQUFBZTtBQUNsRSxBQUFFLEFBQUMsUUFBQyxBQUFPLEFBQUMsU0FBQyxBQUFDO0FBQ1osWUFBSSxBQUFNLFdBQUcsQUFBbUIsb0JBQUMsQUFBTyxBQUFDLEFBQUM7QUFFMUMsU0FBQyxBQUFZLGNBQUUsQUFBTSxRQUFFLEFBQWUsQUFBQyxpQkFBQyxBQUFPLFFBQUMsVUFBQSxBQUFRO0FBQ3RELEFBQUUsQUFBQyxnQkFBQyxBQUFPLFFBQUMsQUFBUSxBQUFDLGFBQUksQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDLFdBQUMsQUFBQztBQUMzQyxBQUFNLHlCQUFDLEFBQVEsQUFBQyxZQUFHLFFBQUssTUFBQyxBQUFFLElBQUUsQUFBTyxRQUFDLEFBQVEsQUFBQyxXQUFFLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxBQUFDLEFBQ3JFO0FBQUMsQUFBQyxBQUFJLHVCQUFLLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxXQUFDLEFBQUM7QUFDN0IsQUFBTSx5QkFBQyxBQUFRLEFBQUMsWUFBRyxRQUFLLE1BQUMsQUFBRSxJQUFFLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxBQUFDLEFBQ2xEO0FBQUMsQUFBQyxBQUFJLGFBRkMsQUFBRSxBQUFDLE1BRUgsQUFBRSxBQUFDLElBQUMsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDLFdBQUMsQUFBQztBQUM3QixBQUFNLHlCQUFDLEFBQVEsQUFBQyxZQUFHLFFBQUssTUFBQyxBQUFFLElBQUUsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDLEFBQUMsQUFDbEQ7QUFBQyxBQUNIO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBTSxlQUFDLEFBQU0sQUFBQyxBQUNoQjtBQUFDLEFBQUMsQUFBSSxXQUFDLEFBQUM7QUFDTixBQUFNLGVBQUMsQUFBTyxBQUFDLEFBQ2pCO0FBQUMsQUFDSDtBQUFDO0FBbEJELHVCQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY3QsIGlzT2JqZWN0LCBpc05vbmUsIG1lcmdlIH0gZnJvbSAnQG9yYml0L3V0aWxzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkSWRlbnRpdHkge1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBpZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZEhhc09uZVJlbGF0aW9uc2hpcCB7XHJcbiAgZGF0YTogUmVjb3JkSWRlbnRpdHkgfCBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZEhhc01hbnlSZWxhdGlvbnNoaXAge1xyXG4gIGRhdGE6IFJlY29yZElkZW50aXR5W107XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJlY29yZFJlbGF0aW9uc2hpcCA9IFJlY29yZEhhc09uZVJlbGF0aW9uc2hpcCB8IFJlY29yZEhhc01hbnlSZWxhdGlvbnNoaXA7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZCBleHRlbmRzIFJlY29yZElkZW50aXR5IHtcclxuICBrZXlzPzogRGljdDxzdHJpbmc+O1xyXG4gIGF0dHJpYnV0ZXM/OiBEaWN0PGFueT47XHJcbiAgcmVsYXRpb25zaGlwcz86IERpY3Q8UmVjb3JkUmVsYXRpb25zaGlwPjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRJbml0aWFsaXplciB7XHJcbiAgaW5pdGlhbGl6ZVJlY29yZChyZWNvcmQ6IFJlY29yZCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVJlY29yZElkZW50aXR5KGlkZW50aXR5OiBSZWNvcmRJZGVudGl0eSk6IFJlY29yZElkZW50aXR5IHtcclxuICBjb25zdCB7IHR5cGUsIGlkIH0gPSBpZGVudGl0eTtcclxuICByZXR1cm4geyB0eXBlLCBpZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxSZWNvcmRJZGVudGl0aWVzKHJlY29yZDE6IFJlY29yZElkZW50aXR5LCByZWNvcmQyOiBSZWNvcmRJZGVudGl0eSk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiAoaXNOb25lKHJlY29yZDEpICYmIGlzTm9uZShyZWNvcmQyKSkgfHxcclxuICAgICAgICAgKGlzT2JqZWN0KHJlY29yZDEpICYmIGlzT2JqZWN0KHJlY29yZDIpICYmXHJcbiAgICAgICAgICByZWNvcmQxLnR5cGUgPT09IHJlY29yZDIudHlwZSAmJlxyXG4gICAgICAgICAgcmVjb3JkMS5pZCA9PT0gcmVjb3JkMi5pZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVJlY29yZHMoY3VycmVudDogUmVjb3JkIHwgbnVsbCwgdXBkYXRlczogUmVjb3JkKTogUmVjb3JkIHtcclxuICBpZiAoY3VycmVudCkge1xyXG4gICAgbGV0IHJlY29yZCA9IGNsb25lUmVjb3JkSWRlbnRpdHkoY3VycmVudCk7XHJcblxyXG4gICAgWydhdHRyaWJ1dGVzJywgJ2tleXMnLCAncmVsYXRpb25zaGlwcyddLmZvckVhY2goZ3JvdXBpbmcgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudFtncm91cGluZ10gJiYgdXBkYXRlc1tncm91cGluZ10pIHtcclxuICAgICAgICByZWNvcmRbZ3JvdXBpbmddID0gbWVyZ2Uoe30sIGN1cnJlbnRbZ3JvdXBpbmddLCB1cGRhdGVzW2dyb3VwaW5nXSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFtncm91cGluZ10pIHtcclxuICAgICAgICByZWNvcmRbZ3JvdXBpbmddID0gbWVyZ2Uoe30sIGN1cnJlbnRbZ3JvdXBpbmddKTtcclxuICAgICAgfSBlbHNlIGlmICh1cGRhdGVzW2dyb3VwaW5nXSkge1xyXG4gICAgICAgIHJlY29yZFtncm91cGluZ10gPSBtZXJnZSh7fSwgdXBkYXRlc1tncm91cGluZ10pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVjb3JkO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gdXBkYXRlcztcclxuICB9XHJcbn1cclxuIl19