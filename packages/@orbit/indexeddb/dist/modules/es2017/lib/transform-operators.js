"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("@orbit/data");
var utils_1 = require("@orbit/utils");
function getRecord(source, record) {
    return source.getRecord(record)
        .catch(function () {
        return data_1.cloneRecordIdentity(record);
    });
}
exports.default = {
    addRecord: function (source, operation) {
        return source.putRecord(operation.record);
    },
    replaceRecord: function (source, operation) {
        var updates = operation.record;
        return source.getRecord(updates)
            .catch(function () { return null; })
            .then(function (current) {
            var record = data_1.mergeRecords(current, updates);
            return source.putRecord(record);
        });
    },
    removeRecord: function (source, operation) {
        return source.removeRecord(operation.record);
    },
    replaceKey: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            record.keys = record.keys || {};
            record.keys[operation.key] = operation.value;
            return source.putRecord(record);
        });
    },
    replaceAttribute: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            record.attributes = record.attributes || {};
            record.attributes[operation.attribute] = operation.value;
            return source.putRecord(record);
        });
    },
    addToRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                relationships.push(operation.relatedRecord);
            }
            else {
                utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], [operation.relatedRecord]);
            }
            return source.putRecord(record);
        });
    },
    removeFromRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                for (var i = 0, l = relationships.length; i < l; i++) {
                    if (data_1.equalRecordIdentities(relationships[i], operation.relatedRecord)) {
                        relationships.splice(i, 1);
                        break;
                    }
                }
                return source.putRecord(record);
            }
        });
    },
    replaceRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecords);
            return source.putRecord(record);
        });
    },
    replaceRelatedRecord: function (source, operation) {
        return getRecord(source, operation.record)
            .then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecord);
            return source.putRecord(record);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLW9wZXJhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvdHJhbnNmb3JtLW9wZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQWNxQjtBQUNyQixzQ0FHc0I7QUFHdEIsbUJBQW1CLE1BQWMsRUFBRSxNQUFzQjtJQUN2RCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7U0FDNUIsS0FBSyxDQUFDO1FBQ0wsTUFBTSxDQUFDLDBCQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELGtCQUFlO0lBQ2IsU0FBUyxZQUFDLE1BQWMsRUFBRSxTQUE2QjtRQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGFBQWEsWUFBQyxNQUFjLEVBQUUsU0FBaUM7UUFDN0QsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUUvQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDN0IsS0FBSyxDQUFDLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDO2FBQ2pCLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDWCxJQUFJLE1BQU0sR0FBRyxtQkFBWSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxZQUFZLFlBQUMsTUFBYyxFQUFFLFNBQWdDO1FBQzNELE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsVUFBVSxZQUFDLE1BQWMsRUFBRSxTQUE4QjtR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cUJBQXFCLFlBQUMsTUFBYyxFQUFFLFNBQXlDO1FBQzdFLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUM7YUFDdkMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUNWLGVBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsb0JBQW9CLFlBQUMsTUFBYyxFQUFFLFNBQXdDO1FBQzNFLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUM7YUFDdkMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUNWLGVBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgbWVyZ2VSZWNvcmRzLFxyXG4gIGNsb25lUmVjb3JkSWRlbnRpdHksXHJcbiAgZXF1YWxSZWNvcmRJZGVudGl0aWVzLFxyXG4gIFJlY29yZCwgUmVjb3JkSWRlbnRpdHksXHJcbiAgQWRkUmVjb3JkT3BlcmF0aW9uLFxyXG4gIEFkZFRvUmVsYXRlZFJlY29yZHNPcGVyYXRpb24sXHJcbiAgUmVwbGFjZUF0dHJpYnV0ZU9wZXJhdGlvbixcclxuICBSZW1vdmVGcm9tUmVsYXRlZFJlY29yZHNPcGVyYXRpb24sXHJcbiAgUmVtb3ZlUmVjb3JkT3BlcmF0aW9uLFxyXG4gIFJlcGxhY2VSZWxhdGVkUmVjb3Jkc09wZXJhdGlvbixcclxuICBSZXBsYWNlUmVsYXRlZFJlY29yZE9wZXJhdGlvbixcclxuICBSZXBsYWNlS2V5T3BlcmF0aW9uLFxyXG4gIFJlcGxhY2VSZWNvcmRPcGVyYXRpb25cclxufSBmcm9tICdAb3JiaXQvZGF0YSc7XHJcbmltcG9ydCB7XHJcbiAgZGVlcEdldCxcclxuICBkZWVwU2V0XHJcbn0gZnJvbSAnQG9yYml0L3V0aWxzJztcclxuaW1wb3J0IFNvdXJjZSBmcm9tICcuLi9zb3VyY2UnO1xyXG5cclxuZnVuY3Rpb24gZ2V0UmVjb3JkKHNvdXJjZTogU291cmNlLCByZWNvcmQ6IFJlY29yZElkZW50aXR5KTogUHJvbWlzZTxSZWNvcmQ+IHtcclxuICByZXR1cm4gc291cmNlLmdldFJlY29yZChyZWNvcmQpXHJcbiAgICAuY2F0Y2goKCkgPT4ge1xyXG4gICAgICByZXR1cm4gY2xvbmVSZWNvcmRJZGVudGl0eShyZWNvcmQpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBhZGRSZWNvcmQoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogQWRkUmVjb3JkT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChvcGVyYXRpb24ucmVjb3JkKTtcclxuICB9LFxyXG5cclxuICByZXBsYWNlUmVjb3JkKHNvdXJjZTogU291cmNlLCBvcGVyYXRpb246IFJlcGxhY2VSZWNvcmRPcGVyYXRpb24pIHtcclxuICAgIGxldCB1cGRhdGVzID0gb3BlcmF0aW9uLnJlY29yZDtcclxuXHJcbiAgICByZXR1cm4gc291cmNlLmdldFJlY29yZCh1cGRhdGVzKVxyXG4gICAgICAuY2F0Y2goKCkgPT4gbnVsbClcclxuICAgICAgLnRoZW4oY3VycmVudCA9PiB7XHJcbiAgICAgICAgbGV0IHJlY29yZCA9IG1lcmdlUmVjb3JkcyhjdXJyZW50LCB1cGRhdGVzKTtcclxuICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZW1vdmVSZWNvcmQoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVtb3ZlUmVjb3JkT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gc291cmNlLnJlbW92ZVJlY29yZChvcGVyYXRpb24ucmVjb3JkKTtcclxuICB9LFxyXG5cclxuICByZXBsYWNlS2V5KHNvdXJjZTogU291cmNlLCBvcGVyYXRpb246IFJlcGxhY2VLZXlPcGVyYXRpb24pIHtcclxuICAgIHJldHVybiBnZXRSZWNvcmQoc291cmNlLCBvcGVyYXRpb24ucmVjb3JkKVxyXG4gICAgICAudGhlbihyZWNvcmQgPT4ge1xyXG4gICAgICAgIHJlY29yZC5rZXlzID0gcmVjb3JkLmtleXMgfHwge307XHJcbiAgICAgICAgcmVjb3JkLmtleXNbb3BlcmF0aW9uLmtleV0gPSBvcGVyYXRpb24udmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5wdXRSZWNvcmQocmVjb3JkKTtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVwbGFjZUF0dHJpYnV0ZShzb3VyY2U6IFNvdXJjZSwgb3BlcmF0aW9uOiBSZXBsYWNlQXR0cmlidXRlT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gZ2V0UmVjb3JkKHNvdXJjZSwgb3BlcmF0aW9uLnJlY29yZClcclxuICAgICAgLnRoZW4ocmVjb3JkID0+IHtcclxuICAgICAgICByZWNvcmQuYXR0cmlidXRlcyA9IHJlY29yZC5hdHRyaWJ1dGVzIHx8IHt9O1xyXG4gICAgICAgIHJlY29yZC5hdHRyaWJ1dGVzW29wZXJhdGlvbi5hdHRyaWJ1dGVdID0gb3BlcmF0aW9uLnZhbHVlO1xyXG4gICAgICAgIHJldHVybiBzb3VyY2UucHV0UmVjb3JkKHJlY29yZCk7XHJcbiAgICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIGFkZFRvUmVsYXRlZFJlY29yZHMoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogQWRkVG9SZWxhdGVkUmVjb3Jkc09wZXJhdGlvbikge1xyXG4gICAgcmV0dXJuIGdldFJlY29yZChzb3VyY2UsIG9wZXJhdGlvbi5yZWNvcmQpXHJcbiAgICAgIC50aGVuKHJlY29yZCA9PiB7XHJcbiAgICAgICAgbGV0IHJlbGF0aW9uc2hpcHMgPSBkZWVwR2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgb3BlcmF0aW9uLnJlbGF0aW9uc2hpcCwgJ2RhdGEnXSk7XHJcbiAgICAgICAgaWYgKHJlbGF0aW9uc2hpcHMpIHtcclxuICAgICAgICAgIHJlbGF0aW9uc2hpcHMucHVzaChvcGVyYXRpb24ucmVsYXRlZFJlY29yZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRlZXBTZXQocmVjb3JkLCBbJ3JlbGF0aW9uc2hpcHMnLCBvcGVyYXRpb24ucmVsYXRpb25zaGlwLCAnZGF0YSddLCBbb3BlcmF0aW9uLnJlbGF0ZWRSZWNvcmRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5wdXRSZWNvcmQocmVjb3JkKTtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVtb3ZlRnJvbVJlbGF0ZWRSZWNvcmRzKHNvdXJjZTogU291cmNlLCBvcGVyYXRpb246IFJlbW92ZUZyb21SZWxhdGVkUmVjb3Jkc09wZXJhdGlvbikge1xyXG4gICAgcmV0dXJuIGdldFJlY29yZChzb3VyY2UsIG9wZXJhdGlvbi5yZWNvcmQpXHJcbiAgICAgIC50aGVuKHJlY29yZCA9PiB7XHJcbiAgICAgICAgbGV0IHJlbGF0aW9uc2hpcHMgPSBkZWVwR2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgb3BlcmF0aW9uLnJlbGF0aW9uc2hpcCwgJ2RhdGEnXSkgYXMgUmVjb3JkSWRlbnRpdHlbXTtcclxuICAgICAgICBpZiAocmVsYXRpb25zaGlwcykge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByZWxhdGlvbnNoaXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZXF1YWxSZWNvcmRJZGVudGl0aWVzKHJlbGF0aW9uc2hpcHNbaV0sIG9wZXJhdGlvbi5yZWxhdGVkUmVjb3JkKSkge1xyXG4gICAgICAgICAgICAgIHJlbGF0aW9uc2hpcHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVwbGFjZVJlbGF0ZWRSZWNvcmRzKHNvdXJjZTogU291cmNlLCBvcGVyYXRpb246IFJlcGxhY2VSZWxhdGVkUmVjb3Jkc09wZXJhdGlvbikge1xyXG4gICAgcmV0dXJuIGdldFJlY29yZChzb3VyY2UsIG9wZXJhdGlvbi5yZWNvcmQpXHJcbiAgICAgIC50aGVuKHJlY29yZCA9PiB7XHJcbiAgICAgICAgZGVlcFNldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIG9wZXJhdGlvbi5yZWxhdGlvbnNoaXAsICdkYXRhJ10sIG9wZXJhdGlvbi5yZWxhdGVkUmVjb3Jkcyk7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5wdXRSZWNvcmQocmVjb3JkKTtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVwbGFjZVJlbGF0ZWRSZWNvcmQoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVwbGFjZVJlbGF0ZWRSZWNvcmRPcGVyYXRpb24pIHtcclxuICAgIHJldHVybiBnZXRSZWNvcmQoc291cmNlLCBvcGVyYXRpb24ucmVjb3JkKVxyXG4gICAgICAudGhlbihyZWNvcmQgPT4ge1xyXG4gICAgICAgIGRlZXBTZXQocmVjb3JkLCBbJ3JlbGF0aW9uc2hpcHMnLCBvcGVyYXRpb24ucmVsYXRpb25zaGlwLCAnZGF0YSddLCBvcGVyYXRpb24ucmVsYXRlZFJlY29yZCk7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5wdXRSZWNvcmQocmVjb3JkKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59O1xyXG4iXX0=