"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("@orbit/data");
var utils_1 = require("@orbit/utils");
function getRecord(source, record) {
    return source.getRecord(record).catch(function () {
        return data_1.cloneRecordIdentity(record);
    });
}
exports.default = {
    addRecord: function (source, operation) {
        return source.putRecord(operation.record);
    },
    replaceRecord: function (source, operation) {
        return source.putRecord(operation.record);
    },
    removeRecord: function (source, operation) {
        return source.removeRecord(operation.record);
    },
    replaceKey: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            record.keys = record.keys || {};
            record.keys[operation.key] = operation.value;
            return source.putRecord(record);
        });
    },
    replaceAttribute: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            record.attributes = record.attributes || {};
            record.attributes[operation.attribute] = operation.value;
            return source.putRecord(record);
        });
    },
    addToRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                relationships.push(operation.relatedRecord);
            } else {
                utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], [operation.relatedRecord]);
            }
            return source.putRecord(record);
        });
    },
    removeFromRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                for (var i = 0, l = relationships.length; i < l; i++) {
                    if (data_1.equalRecordIdentities(relationships[i], operation.relatedRecord)) {
                        relationships.splice(i, 1);
                        break;
                    }
                }
                return source.putRecord(record);
            }
        });
    },
    replaceRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecords);
            return source.putRecord(record);
        });
    },
    replaceRelatedRecord: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecord);
            return source.putRecord(record);
        });
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,