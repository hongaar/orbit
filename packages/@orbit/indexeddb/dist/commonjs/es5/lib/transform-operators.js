"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("@orbit/data");
var utils_1 = require("@orbit/utils");
function getRecord(source, record) {
    return source.getRecord(record).catch(function () {
        return data_1.cloneRecordIdentity(record);
    });
}
exports.default = {
    addRecord: function (source, operation) {
        return source.putRecord(operation.record);
    },
    replaceRecord: function (source, operation) {
        var updates = operation.record;
        return source.getRecord(updates).catch(function () {
            return null;
        }).then(function (current) {
            var record = data_1.mergeRecords(current, updates);
            return source.putRecord(record);
        });
    },
    removeRecord: function (source, operation) {
        return source.removeRecord(operation.record);
    },
    replaceKey: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            record.keys = record.keys || {};
            record.keys[operation.key] = operation.value;
            return source.putRecord(record);
        });
    },
    replaceAttribute: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            record.attributes = record.attributes || {};
            record.attributes[operation.attribute] = operation.value;
            return source.putRecord(record);
        });
    },
    addToRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                relationships.push(operation.relatedRecord);
            } else {
                utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], [operation.relatedRecord]);
            }
            return source.putRecord(record);
        });
    },
    removeFromRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            var relationships = utils_1.deepGet(record, ['relationships', operation.relationship, 'data']);
            if (relationships) {
                for (var i = 0, l = relationships.length; i < l; i++) {
                    if (data_1.equalRecordIdentities(relationships[i], operation.relatedRecord)) {
                        relationships.splice(i, 1);
                        break;
                    }
                }
                return source.putRecord(record);
            }
        });
    },
    replaceRelatedRecords: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecords);
            return source.putRecord(record);
        });
    },
    replaceRelatedRecord: function (source, operation) {
        return getRecord(source, operation.record).then(function (record) {
            utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecord);
            return source.putRecord(record);
        });
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLW9wZXJhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvdHJhbnNmb3JtLW9wZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQkFjcUI7QUFDckIsc0JBR3NCO0FBR3RCLG1CQUFtQixBQUFjLFFBQUUsQUFBc0IsUUFDdkQsQUFBTTtrQkFBUSxBQUFTLFVBQUMsQUFBTSxBQUFDLFFBQzVCLEFBQUssTUFBQyxZQUNMLEFBQU07ZUFBQyxPQUFtQixvQkFBQyxBQUFNLEFBQUMsQUFBQyxBQUNyQyxBQUFDLEFBQUMsQUFBQyxBQUNQO0FBSlMsQUFBTSxBQUlkOztBQUVEO3lCQUNZLEFBQWMsUUFBRSxBQUE2QixXQUNyRCxBQUFNO2VBQUMsQUFBTSxPQUFDLEFBQVMsVUFBQyxBQUFTLFVBQUMsQUFBTSxBQUFDLEFBQUMsQUFDNUMsQUFBQztBQUVELEFBQWE7NkJBQUMsQUFBYyxRQUFFLEFBQWlDLFdBQzdEO1lBQUksQUFBTyxVQUFHLEFBQVMsVUFBQyxBQUFNLEFBQUMsQUFFL0IsQUFBTTtzQkFBUSxBQUFTLFVBQUMsQUFBTyxBQUFDLFNBQzdCLEFBQUssTUFBQyxZQUFNO21CQUFBLEFBQUksQUFBQztBQURiLEFBQU0sV0FFVixBQUFJLEtBQUMsVUFBQSxBQUFPLFNBQ1g7Z0JBQUksQUFBTSxTQUFHLE9BQVksYUFBQyxBQUFPLFNBQUUsQUFBTyxBQUFDLEFBQUMsQUFDNUMsQUFBTTttQkFBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ2xDLEFBQUMsQUFBQyxBQUFDLEFBQ1A7QUFBQztBQUVELEFBQVk7NEJBQUMsQUFBYyxRQUFFLEFBQWdDLFdBQzNELEFBQU07ZUFBQyxBQUFNLE9BQUMsQUFBWSxhQUFDLEFBQVMsVUFBQyxBQUFNLEFBQUMsQUFBQyxBQUMvQyxBQUFDO0FBRUQsQUFBVTswQkFBQyxBQUFjLFFBQUUsQUFBOEIsV0FDdkQsQUFBTTt5QkFBVyxB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O0FBRUQsQUFBcUI7cUNBQUMsQUFBYyxRQUFFLEFBQXlDLFdBQzdFLEFBQU07eUJBQVcsQUFBTSxRQUFFLEFBQVMsVUFBQyxBQUFNLEFBQUMsUUFDdkMsQUFBSSxLQUFDLFVBQUEsQUFBTSxRQUNWO29CQUFPLFFBQUMsQUFBTSxRQUFFLENBQUMsQUFBZSxpQkFBRSxBQUFTLFVBQUMsQUFBWSxjQUFFLEFBQU0sQUFBQyxTQUFFLEFBQVMsVUFBQyxBQUFjLEFBQUMsQUFBQyxBQUM3RixBQUFNO21CQUFDLEFBQU0sT0FBQyxBQUFTLFVBQUMsQUFBTSxBQUFDLEFBQUMsQUFDbEMsQUFBQyxBQUFDLEFBQUMsQUFDUDtBQUxTLEFBQVMsQUFLakI7QUFFRCxBQUFvQjtvQ0FBQyxBQUFjLFFBQUUsQUFBd0MsV0FDM0UsQUFBTTt5QkFBVyxBQUFNLFFBQUUsQUFBUyxVQUFDLEFBQU0sQUFBQyxRQUN2QyxBQUFJLEtBQUMsVUFBQSxBQUFNLFFBQ1Y7b0JBQU8sUUFBQyxBQUFNLFFBQUUsQ0FBQyxBQUFlLGlCQUFFLEFBQVMsVUFBQyxBQUFZLGNBQUUsQUFBTSxBQUFDLFNBQUUsQUFBUyxVQUFDLEFBQWEsQUFBQyxBQUFDLEFBQzVGLEFBQU07bUJBQUMsQUFBTSxPQUFDLEFBQVMsVUFBQyxBQUFNLEFBQUMsQUFBQyxBQUNsQyxBQUFDLEFBQUMsQUFBQyxBQUNQO0FBTFMsQUFBUyxBQUtqQixBQUNGLEFBQUM7QUFsRmE7QUFDYixBQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBtZXJnZVJlY29yZHMsXHJcbiAgY2xvbmVSZWNvcmRJZGVudGl0eSxcclxuICBlcXVhbFJlY29yZElkZW50aXRpZXMsXHJcbiAgUmVjb3JkLCBSZWNvcmRJZGVudGl0eSxcclxuICBBZGRSZWNvcmRPcGVyYXRpb24sXHJcbiAgQWRkVG9SZWxhdGVkUmVjb3Jkc09wZXJhdGlvbixcclxuICBSZXBsYWNlQXR0cmlidXRlT3BlcmF0aW9uLFxyXG4gIFJlbW92ZUZyb21SZWxhdGVkUmVjb3Jkc09wZXJhdGlvbixcclxuICBSZW1vdmVSZWNvcmRPcGVyYXRpb24sXHJcbiAgUmVwbGFjZVJlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uLFxyXG4gIFJlcGxhY2VSZWxhdGVkUmVjb3JkT3BlcmF0aW9uLFxyXG4gIFJlcGxhY2VLZXlPcGVyYXRpb24sXHJcbiAgUmVwbGFjZVJlY29yZE9wZXJhdGlvblxyXG59IGZyb20gJ0BvcmJpdC9kYXRhJztcclxuaW1wb3J0IHtcclxuICBkZWVwR2V0LFxyXG4gIGRlZXBTZXRcclxufSBmcm9tICdAb3JiaXQvdXRpbHMnO1xyXG5pbXBvcnQgU291cmNlIGZyb20gJy4uL3NvdXJjZSc7XHJcblxyXG5mdW5jdGlvbiBnZXRSZWNvcmQoc291cmNlOiBTb3VyY2UsIHJlY29yZDogUmVjb3JkSWRlbnRpdHkpOiBQcm9taXNlPFJlY29yZD4ge1xyXG4gIHJldHVybiBzb3VyY2UuZ2V0UmVjb3JkKHJlY29yZClcclxuICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgIHJldHVybiBjbG9uZVJlY29yZElkZW50aXR5KHJlY29yZCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGFkZFJlY29yZChzb3VyY2U6IFNvdXJjZSwgb3BlcmF0aW9uOiBBZGRSZWNvcmRPcGVyYXRpb24pIHtcclxuICAgIHJldHVybiBzb3VyY2UucHV0UmVjb3JkKG9wZXJhdGlvbi5yZWNvcmQpO1xyXG4gIH0sXHJcblxyXG4gIHJlcGxhY2VSZWNvcmQoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVwbGFjZVJlY29yZE9wZXJhdGlvbikge1xyXG4gICAgbGV0IHVwZGF0ZXMgPSBvcGVyYXRpb24ucmVjb3JkO1xyXG5cclxuICAgIHJldHVybiBzb3VyY2UuZ2V0UmVjb3JkKHVwZGF0ZXMpXHJcbiAgICAgIC5jYXRjaCgoKSA9PiBudWxsKVxyXG4gICAgICAudGhlbihjdXJyZW50ID0+IHtcclxuICAgICAgICBsZXQgcmVjb3JkID0gbWVyZ2VSZWNvcmRzKGN1cnJlbnQsIHVwZGF0ZXMpO1xyXG4gICAgICAgIHJldHVybiBzb3VyY2UucHV0UmVjb3JkKHJlY29yZCk7XHJcbiAgICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHJlbW92ZVJlY29yZChzb3VyY2U6IFNvdXJjZSwgb3BlcmF0aW9uOiBSZW1vdmVSZWNvcmRPcGVyYXRpb24pIHtcclxuICAgIHJldHVybiBzb3VyY2UucmVtb3ZlUmVjb3JkKG9wZXJhdGlvbi5yZWNvcmQpO1xyXG4gIH0sXHJcblxyXG4gIHJlcGxhY2VLZXkoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVwbGFjZUtleU9wZXJhdGlvbikge1xyXG4gICAgcmV0dXJuIGdldFJlY29yZChzb3VyY2UsIG9wZXJhdGlvbi5yZWNvcmQpXHJcbiAgICAgIC50aGVuKHJlY29yZCA9PiB7XHJcbiAgICAgICAgcmVjb3JkLmtleXMgPSByZWNvcmQua2V5cyB8fCB7fTtcclxuICAgICAgICByZWNvcmQua2V5c1tvcGVyYXRpb24ua2V5XSA9IG9wZXJhdGlvbi52YWx1ZTtcclxuICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZXBsYWNlQXR0cmlidXRlKHNvdXJjZTogU291cmNlLCBvcGVyYXRpb246IFJlcGxhY2VBdHRyaWJ1dGVPcGVyYXRpb24pIHtcclxuICAgIHJldHVybiBnZXRSZWNvcmQoc291cmNlLCBvcGVyYXRpb24ucmVjb3JkKVxyXG4gICAgICAudGhlbihyZWNvcmQgPT4ge1xyXG4gICAgICAgIHJlY29yZC5hdHRyaWJ1dGVzID0gcmVjb3JkLmF0dHJpYnV0ZXMgfHwge307XHJcbiAgICAgICAgcmVjb3JkLmF0dHJpYnV0ZXNbb3BlcmF0aW9uLmF0dHJpYnV0ZV0gPSBvcGVyYXRpb24udmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5wdXRSZWNvcmQocmVjb3JkKTtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgYWRkVG9SZWxhdGVkUmVjb3Jkcyhzb3VyY2U6IFNvdXJjZSwgb3BlcmF0aW9uOiBBZGRUb1JlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gZ2V0UmVjb3JkKHNvdXJjZSwgb3BlcmF0aW9uLnJlY29yZClcclxuICAgICAgLnRoZW4ocmVjb3JkID0+IHtcclxuICAgICAgICBsZXQgcmVsYXRpb25zaGlwcyA9IGRlZXBHZXQocmVjb3JkLCBbJ3JlbGF0aW9uc2hpcHMnLCBvcGVyYXRpb24ucmVsYXRpb25zaGlwLCAnZGF0YSddKTtcclxuICAgICAgICBpZiAocmVsYXRpb25zaGlwcykge1xyXG4gICAgICAgICAgcmVsYXRpb25zaGlwcy5wdXNoKG9wZXJhdGlvbi5yZWxhdGVkUmVjb3JkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZGVlcFNldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIG9wZXJhdGlvbi5yZWxhdGlvbnNoaXAsICdkYXRhJ10sIFtvcGVyYXRpb24ucmVsYXRlZFJlY29yZF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZW1vdmVGcm9tUmVsYXRlZFJlY29yZHMoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVtb3ZlRnJvbVJlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gZ2V0UmVjb3JkKHNvdXJjZSwgb3BlcmF0aW9uLnJlY29yZClcclxuICAgICAgLnRoZW4ocmVjb3JkID0+IHtcclxuICAgICAgICBsZXQgcmVsYXRpb25zaGlwcyA9IGRlZXBHZXQocmVjb3JkLCBbJ3JlbGF0aW9uc2hpcHMnLCBvcGVyYXRpb24ucmVsYXRpb25zaGlwLCAnZGF0YSddKSBhcyBSZWNvcmRJZGVudGl0eVtdO1xyXG4gICAgICAgIGlmIChyZWxhdGlvbnNoaXBzKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHJlbGF0aW9uc2hpcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlcXVhbFJlY29yZElkZW50aXRpZXMocmVsYXRpb25zaGlwc1tpXSwgb3BlcmF0aW9uLnJlbGF0ZWRSZWNvcmQpKSB7XHJcbiAgICAgICAgICAgICAgcmVsYXRpb25zaGlwcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBzb3VyY2UucHV0UmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZXBsYWNlUmVsYXRlZFJlY29yZHMoc291cmNlOiBTb3VyY2UsIG9wZXJhdGlvbjogUmVwbGFjZVJlbGF0ZWRSZWNvcmRzT3BlcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gZ2V0UmVjb3JkKHNvdXJjZSwgb3BlcmF0aW9uLnJlY29yZClcclxuICAgICAgLnRoZW4ocmVjb3JkID0+IHtcclxuICAgICAgICBkZWVwU2V0KHJlY29yZCwgWydyZWxhdGlvbnNoaXBzJywgb3BlcmF0aW9uLnJlbGF0aW9uc2hpcCwgJ2RhdGEnXSwgb3BlcmF0aW9uLnJlbGF0ZWRSZWNvcmRzKTtcclxuICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICByZXBsYWNlUmVsYXRlZFJlY29yZChzb3VyY2U6IFNvdXJjZSwgb3BlcmF0aW9uOiBSZXBsYWNlUmVsYXRlZFJlY29yZE9wZXJhdGlvbikge1xyXG4gICAgcmV0dXJuIGdldFJlY29yZChzb3VyY2UsIG9wZXJhdGlvbi5yZWNvcmQpXHJcbiAgICAgIC50aGVuKHJlY29yZCA9PiB7XHJcbiAgICAgICAgZGVlcFNldChyZWNvcmQsIFsncmVsYXRpb25zaGlwcycsIG9wZXJhdGlvbi5yZWxhdGlvbnNoaXAsICdkYXRhJ10sIG9wZXJhdGlvbi5yZWxhdGVkUmVjb3JkKTtcclxuICAgICAgICByZXR1cm4gc291cmNlLnB1dFJlY29yZChyZWNvcmQpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn07XHJcbiJdfQ==