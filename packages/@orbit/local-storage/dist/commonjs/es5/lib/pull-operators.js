"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var data_1 = require("@orbit/data");
exports.PullOperators = {
    findRecords: function (source, expression) {
        var operations = [];
        var typeFilter = expression.type;
        for (var key in data_1.default.globals.localStorage) {
            if (key.indexOf(source.namespace) === 0) {
                var typesMatch = utils_1.isNone(typeFilter);
                if (!typesMatch) {
                    var fragments = key.split(source.delimiter);
                    var type = fragments[1];
                    typesMatch = typeFilter === type;
                }
                if (typesMatch) {
                    var record = JSON.parse(data_1.default.globals.localStorage.getItem(key));
                    if (source.keyMap) {
                        source.keyMap.pushRecord(record);
                    }
                    operations.push({
                        op: 'addRecord',
                        record: record
                    });
                }
            }
        }
        return data_1.default.Promise.resolve([data_1.buildTransform(operations)]);
    },
    findRecord: function (source, expression) {
        var operations = [];
        var requestedRecord = expression.record;
        for (var key in data_1.default.globals.localStorage) {
            if (key.indexOf(source.namespace) === 0) {
                var fragments = key.split(source.delimiter);
                var type = fragments[1];
                var id = fragments[2];
                if (type === requestedRecord.type && id === requestedRecord.id) {
                    var record = JSON.parse(data_1.default.globals.localStorage.getItem(key));
                    if (source.keyMap) {
                        source.keyMap.pushRecord(record);
                    }
                    operations.push({
                        op: 'addRecord',
                        record: record
                    });
                    break;
                }
            }
        }
        return data_1.default.Promise.resolve([data_1.buildTransform(operations)]);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC1vcGVyYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGliL3B1bGwtb3BlcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNCQUEyQztBQUMzQyxxQkFNcUI7QUFPUixRQUFBLEFBQWE7aUJBQ3hCLFVBQVksQUFBMEIsUUFBRSxBQUF1QixZQUM3RDtZQUFNLEFBQVUsYUFBRyxBQUFFLEFBQUMsQUFFdEI7WUFBTSxBQUFVLGFBQUcsQUFBVSxXQUFDLEFBQUksQUFBQyxBQUVuQyxBQUFHLEFBQUM7YUFBQyxJQUFJLEFBQUcsT0FBSSxPQUFLLFFBQUMsQUFBTyxRQUFDLEFBQVksQUFBQyxjQUFDLEFBQUMsQUFDM0MsQUFBRSxBQUFDO2dCQUFDLEFBQUcsSUFBQyxBQUFPLFFBQUMsQUFBTSxPQUFDLEFBQVMsQUFBQyxlQUFLLEFBQUMsQUFBQyxHQUFDLEFBQUMsQUFDeEM7b0JBQUksQUFBVSxhQUFHLFFBQU0sT0FBQyxBQUFVLEFBQUMsQUFBQyxBQUVwQyxBQUFFLEFBQUM7b0JBQUMsQ0FBQyxBQUFVLEFBQUMsWUFBQyxBQUFDLEFBQ2hCO3dCQUFJLEFBQVMsWUFBRyxBQUFHLElBQUMsQUFBSyxNQUFDLEFBQU0sT0FBQyxBQUFTLEFBQUMsQUFBQyxBQUM1Qzt3QkFBSSxBQUFJLE9BQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hCLEFBQVUsQUFBRztpQ0FBQyxBQUFVLGVBQUssQUFBSSxBQUFDLEFBQUMsQUFDckMsQUFBQztBQUVELEFBQUUsQUFBQztvQkFBQyxBQUFVLEFBQUMsWUFBQyxBQUFDLEFBQ2Y7d0JBQUksQUFBTSxTQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsT0FBSyxRQUFDLEFBQU8sUUFBQyxBQUFZLGFBQUMsQUFBTyxRQUFDLEFBQUcsQUFBQyxBQUFDLEFBQUMsQUFFakUsQUFBRSxBQUFDO3dCQUFDLEFBQU0sT0FBQyxBQUFNLEFBQUMsUUFBQyxBQUFDLEFBQ2xCLEFBQU07K0JBQUMsQUFBTSxPQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFBQyxBQUNuQyxBQUFDO0FBRUQsQUFBVTsrQkFBQyxBQUFJOzRCQUNULEFBQVcsQUFDZixBQUFNO2dDQUZRLEFBRVIsQUFDUCxBQUFDLEFBQUMsQUFDTCxBQUFDLEFBQ0g7QUFKTSxBQUFFO0FBSVAsQUFDSDtBQUFDO0FBRUQsQUFBTTtlQUFDLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBTyxRQUFDLENBQUMsT0FBYyxlQUFDLEFBQVUsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUM3RCxBQUFDO0FBRUQsQUFBVTtnQkFBVixVQUFXLEFBQTBCLFFBQUUsQUFBc0IsWUFDM0Q7WUFBTSxBQUFVLGFBQUcsQUFBRSxBQUFDLEFBQ3RCO1lBQU0sQUFBZSxrQkFBRyxBQUFVLFdBQUMsQUFBTSxBQUFDLEFBRTFDLEFBQUcsQUFBQzthQUFDLElBQUksQUFBRyxPQUFJLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBWSxBQUFDLGNBQUMsQUFBQyxBQUMzQyxBQUFFLEFBQUM7Z0JBQUMsQUFBRyxJQUFDLEFBQU8sUUFBQyxBQUFNLE9BQUMsQUFBUyxBQUFDLGVBQUssQUFBQyxBQUFDLEdBQUMsQUFBQyxBQUN4QztvQkFBSSxBQUFTLFlBQUcsQUFBRyxJQUFDLEFBQUssTUFBQyxBQUFNLE9BQUMsQUFBUyxBQUFDLEFBQUMsQUFDNUM7b0JBQUksQUFBSSxPQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsQUFBQyxBQUN4QjtvQkFBSSxBQUFFLEtBQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDLEFBRXRCLEFBQUUsQUFBQztvQkFBQyxBQUFJLFNBQUssQUFBZSxnQkFBQyxBQUFJLFFBQzdCLEFBQUUsT0FBSyxBQUFlLGdCQUFDLEFBQUUsQUFBQyxJQUFDLEFBQUMsQUFDOUI7d0JBQUksQUFBTSxTQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsT0FBSyxRQUFDLEFBQU8sUUFBQyxBQUFZLGFBQUMsQUFBTyxRQUFDLEFBQUcsQUFBQyxBQUFDLEFBQUMsQUFFakUsQUFBRSxBQUFDO3dCQUFDLEFBQU0sT0FBQyxBQUFNLEFBQUMsUUFBQyxBQUFDLEFBQ2xCLEFBQU07K0JBQUMsQUFBTSxPQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFBQyxBQUNuQyxBQUFDO0FBRUQsQUFBVTsrQkFBQyxBQUFJOzRCQUNULEFBQVcsQUFDZixBQUFNO2dDQUZRLEFBRVIsQUFDUCxBQUFDLEFBQUMsQUFFSCxBQUFLLEFBQUMsQUFDUjtBQUxJLEFBQUU7QUFLTCxBQUNIO0FBQUMsQUFDSDtBQUFDO0FBRUQsQUFBTTtlQUFDLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBTyxRQUFDLENBQUMsT0FBYyxlQUFDLEFBQVUsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUM3RCxBQUFDLEFBQ0YsQUFBQztBQWhFK0M7QUFDL0MsQUFBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY3QsIGlzTm9uZSB9IGZyb20gJ0BvcmJpdC91dGlscydcclxuaW1wb3J0IE9yYml0LCB7XHJcbiAgUXVlcnlFeHByZXNzaW9uLFxyXG4gIFRyYW5zZm9ybSxcclxuICBGaW5kUmVjb3JkLFxyXG4gIEZpbmRSZWNvcmRzLFxyXG4gIGJ1aWxkVHJhbnNmb3JtXHJcbn0gZnJvbSAnQG9yYml0L2RhdGEnO1xyXG5pbXBvcnQgTG9jYWxTdG9yYWdlU291cmNlIGZyb20gJy4uL3NvdXJjZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFB1bGxPcGVyYXRvciB7XHJcbiAgKHNvdXJjZTogTG9jYWxTdG9yYWdlU291cmNlLCBleHByZXNzaW9uOiBRdWVyeUV4cHJlc3Npb24pOiBQcm9taXNlPFRyYW5zZm9ybVtdPjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFB1bGxPcGVyYXRvcnM6IERpY3Q8UHVsbE9wZXJhdG9yPiA9IHtcclxuICBmaW5kUmVjb3Jkcyhzb3VyY2U6IExvY2FsU3RvcmFnZVNvdXJjZSwgZXhwcmVzc2lvbjogRmluZFJlY29yZHMpOiBQcm9taXNlPFRyYW5zZm9ybVtdPiB7XHJcbiAgICBjb25zdCBvcGVyYXRpb25zID0gW107XHJcblxyXG4gICAgY29uc3QgdHlwZUZpbHRlciA9IGV4cHJlc3Npb24udHlwZTtcclxuXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gT3JiaXQuZ2xvYmFscy5sb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgaWYgKGtleS5pbmRleE9mKHNvdXJjZS5uYW1lc3BhY2UpID09PSAwKSB7XHJcbiAgICAgICAgbGV0IHR5cGVzTWF0Y2ggPSBpc05vbmUodHlwZUZpbHRlcik7XHJcblxyXG4gICAgICAgIGlmICghdHlwZXNNYXRjaCkge1xyXG4gICAgICAgICAgbGV0IGZyYWdtZW50cyA9IGtleS5zcGxpdChzb3VyY2UuZGVsaW1pdGVyKTtcclxuICAgICAgICAgIGxldCB0eXBlID0gZnJhZ21lbnRzWzFdO1xyXG4gICAgICAgICAgdHlwZXNNYXRjaCA9ICh0eXBlRmlsdGVyID09PSB0eXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlc01hdGNoKSB7XHJcbiAgICAgICAgICBsZXQgcmVjb3JkID0gSlNPTi5wYXJzZShPcmJpdC5nbG9iYWxzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpO1xyXG5cclxuICAgICAgICAgIGlmIChzb3VyY2Uua2V5TWFwKSB7XHJcbiAgICAgICAgICAgIHNvdXJjZS5rZXlNYXAucHVzaFJlY29yZChyZWNvcmQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG9wZXJhdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIG9wOiAnYWRkUmVjb3JkJyxcclxuICAgICAgICAgICAgcmVjb3JkXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT3JiaXQuUHJvbWlzZS5yZXNvbHZlKFtidWlsZFRyYW5zZm9ybShvcGVyYXRpb25zKV0pO1xyXG4gIH0sXHJcblxyXG4gIGZpbmRSZWNvcmQoc291cmNlOiBMb2NhbFN0b3JhZ2VTb3VyY2UsIGV4cHJlc3Npb246IEZpbmRSZWNvcmQpOiBQcm9taXNlPFRyYW5zZm9ybVtdPiB7XHJcbiAgICBjb25zdCBvcGVyYXRpb25zID0gW107XHJcbiAgICBjb25zdCByZXF1ZXN0ZWRSZWNvcmQgPSBleHByZXNzaW9uLnJlY29yZDtcclxuXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gT3JiaXQuZ2xvYmFscy5sb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgaWYgKGtleS5pbmRleE9mKHNvdXJjZS5uYW1lc3BhY2UpID09PSAwKSB7XHJcbiAgICAgICAgbGV0IGZyYWdtZW50cyA9IGtleS5zcGxpdChzb3VyY2UuZGVsaW1pdGVyKTtcclxuICAgICAgICBsZXQgdHlwZSA9IGZyYWdtZW50c1sxXTtcclxuICAgICAgICBsZXQgaWQgPSBmcmFnbWVudHNbMl07XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSByZXF1ZXN0ZWRSZWNvcmQudHlwZSAmJlxyXG4gICAgICAgICAgICBpZCA9PT0gcmVxdWVzdGVkUmVjb3JkLmlkKSB7XHJcbiAgICAgICAgICBsZXQgcmVjb3JkID0gSlNPTi5wYXJzZShPcmJpdC5nbG9iYWxzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpO1xyXG5cclxuICAgICAgICAgIGlmIChzb3VyY2Uua2V5TWFwKSB7XHJcbiAgICAgICAgICAgIHNvdXJjZS5rZXlNYXAucHVzaFJlY29yZChyZWNvcmQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG9wZXJhdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIG9wOiAnYWRkUmVjb3JkJyxcclxuICAgICAgICAgICAgcmVjb3JkXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gT3JiaXQuUHJvbWlzZS5yZXNvbHZlKFtidWlsZFRyYW5zZm9ybShvcGVyYXRpb25zKV0pO1xyXG4gIH1cclxufTtcclxuIl19