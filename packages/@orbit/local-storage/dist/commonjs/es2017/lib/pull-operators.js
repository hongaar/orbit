"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var data_1 = require("@orbit/data");
exports.PullOperators = {
    findRecords: function (source, expression) {
        var operations = [];
        var typeFilter = expression.type;
        for (var key in data_1.default.globals.localStorage) {
            if (key.indexOf(source.namespace) === 0) {
                var typesMatch = utils_1.isNone(typeFilter);
                if (!typesMatch) {
                    var fragments = key.split(source.delimiter);
                    var type = fragments[1];
                    typesMatch = typeFilter === type;
                }
                if (typesMatch) {
                    var record = JSON.parse(data_1.default.globals.localStorage.getItem(key));
                    if (source.keyMap) {
                        source.keyMap.pushRecord(record);
                    }
                    operations.push({
                        op: 'addRecord',
                        record: record
                    });
                }
            }
        }
        return data_1.default.Promise.resolve([data_1.buildTransform(operations)]);
    },
    findRecord: function (source, expression) {
        var operations = [];
        var requestedRecord = expression.record;
        for (var key in data_1.default.globals.localStorage) {
            if (key.indexOf(source.namespace) === 0) {
                var fragments = key.split(source.delimiter);
                var type = fragments[1];
                var id = fragments[2];
                if (type === requestedRecord.type && id === requestedRecord.id) {
                    var record = JSON.parse(data_1.default.globals.localStorage.getItem(key));
                    if (source.keyMap) {
                        source.keyMap.pushRecord(record);
                    }
                    operations.push({
                        op: 'addRecord',
                        record: record
                    });
                    break;
                }
            }
        }
        return data_1.default.Promise.resolve([data_1.buildTransform(operations)]);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC1vcGVyYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbGliL3B1bGwtb3BlcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNCQUEyQztBQUMzQyxxQkFNcUI7QUFPUixRQUFBLEFBQWE7QUFDeEIsQUFBVyxpQkFBWCxVQUFZLEFBQTBCLFFBQUUsQUFBdUI7QUFDN0QsWUFBTSxBQUFVLGFBQUcsQUFBRSxBQUFDO0FBRXRCLFlBQU0sQUFBVSxhQUFHLEFBQVUsV0FBQyxBQUFJLEFBQUM7QUFFbkMsQUFBRyxBQUFDLGFBQUMsSUFBSSxBQUFHLE9BQUksT0FBSyxRQUFDLEFBQU8sUUFBQyxBQUFZLEFBQUMsY0FBQyxBQUFDO0FBQzNDLEFBQUUsQUFBQyxnQkFBQyxBQUFHLElBQUMsQUFBTyxRQUFDLEFBQU0sT0FBQyxBQUFTLEFBQUMsZUFBSyxBQUFDLEFBQUMsR0FBQyxBQUFDO0FBQ3hDLG9CQUFJLEFBQVUsYUFBRyxRQUFNLE9BQUMsQUFBVSxBQUFDLEFBQUM7QUFFcEMsQUFBRSxBQUFDLG9CQUFDLENBQUMsQUFBVSxBQUFDLFlBQUMsQUFBQztBQUNoQix3QkFBSSxBQUFTLFlBQUcsQUFBRyxJQUFDLEFBQUssTUFBQyxBQUFNLE9BQUMsQUFBUyxBQUFDLEFBQUM7QUFDNUMsd0JBQUksQUFBSSxPQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsQUFBQztBQUN4QixBQUFVLEFBQUcsaUNBQUMsQUFBVSxlQUFLLEFBQUksQUFBQyxBQUFDLEFBQ3JDO0FBQUM7QUFFRCxBQUFFLEFBQUMsb0JBQUMsQUFBVSxBQUFDLFlBQUMsQUFBQztBQUNmLHdCQUFJLEFBQU0sU0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBWSxhQUFDLEFBQU8sUUFBQyxBQUFHLEFBQUMsQUFBQyxBQUFDO0FBRWpFLEFBQUUsQUFBQyx3QkFBQyxBQUFNLE9BQUMsQUFBTSxBQUFDLFFBQUMsQUFBQztBQUNsQixBQUFNLCtCQUFDLEFBQU0sT0FBQyxBQUFVLFdBQUMsQUFBTSxBQUFDLEFBQUMsQUFDbkM7QUFBQztBQUVELEFBQVUsK0JBQUMsQUFBSTtBQUNiLEFBQUUsNEJBQUUsQUFBVztBQUNmLEFBQU0sZ0NBQUEsQUFDUCxBQUFDLEFBQUMsQUFDTDtBQUprQjtBQUlqQixBQUNIO0FBQUMsQUFDSDtBQUFDO0FBRUQsQUFBTSxlQUFDLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBTyxRQUFDLENBQUMsT0FBYyxlQUFDLEFBQVUsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUM3RDtBQUFDO0FBRUQsQUFBVSxnQkFBVixVQUFXLEFBQTBCLFFBQUUsQUFBc0I7QUFDM0QsWUFBTSxBQUFVLGFBQUcsQUFBRSxBQUFDO0FBQ3RCLFlBQU0sQUFBZSxrQkFBRyxBQUFVLFdBQUMsQUFBTSxBQUFDO0FBRTFDLEFBQUcsQUFBQyxhQUFDLElBQUksQUFBRyxPQUFJLE9BQUssUUFBQyxBQUFPLFFBQUMsQUFBWSxBQUFDLGNBQUMsQUFBQztBQUMzQyxBQUFFLEFBQUMsZ0JBQUMsQUFBRyxJQUFDLEFBQU8sUUFBQyxBQUFNLE9BQUMsQUFBUyxBQUFDLGVBQUssQUFBQyxBQUFDLEdBQUMsQUFBQztBQUN4QyxvQkFBSSxBQUFTLFlBQUcsQUFBRyxJQUFDLEFBQUssTUFBQyxBQUFNLE9BQUMsQUFBUyxBQUFDLEFBQUM7QUFDNUMsb0JBQUksQUFBSSxPQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsQUFBQztBQUN4QixvQkFBSSxBQUFFLEtBQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDO0FBRXRCLEFBQUUsQUFBQyxvQkFBQyxBQUFJLFNBQUssQUFBZSxnQkFBQyxBQUFJLFFBQzdCLEFBQUUsT0FBSyxBQUFlLGdCQUFDLEFBQUUsQUFBQyxJQUFDLEFBQUM7QUFDOUIsd0JBQUksQUFBTSxTQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsT0FBSyxRQUFDLEFBQU8sUUFBQyxBQUFZLGFBQUMsQUFBTyxRQUFDLEFBQUcsQUFBQyxBQUFDLEFBQUM7QUFFakUsQUFBRSxBQUFDLHdCQUFDLEFBQU0sT0FBQyxBQUFNLEFBQUMsUUFBQyxBQUFDO0FBQ2xCLEFBQU0sK0JBQUMsQUFBTSxPQUFDLEFBQVUsV0FBQyxBQUFNLEFBQUMsQUFBQyxBQUNuQztBQUFDO0FBRUQsQUFBVSwrQkFBQyxBQUFJO0FBQ2IsQUFBRSw0QkFBRSxBQUFXO0FBQ2YsQUFBTSxnQ0FBQSxBQUNQLEFBQUMsQUFBQztBQUhhO0FBS2hCLEFBQUssQUFBQyxBQUNSO0FBQUMsQUFDSDtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQU0sZUFBQyxPQUFLLFFBQUMsQUFBTyxRQUFDLEFBQU8sUUFBQyxDQUFDLE9BQWMsZUFBQyxBQUFVLEFBQUMsQUFBQyxBQUFDLEFBQUMsQUFDN0Q7QUFBQyxBQUNGLEFBQUM7QUFoRStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGljdCwgaXNOb25lIH0gZnJvbSAnQG9yYml0L3V0aWxzJ1xyXG5pbXBvcnQgT3JiaXQsIHtcclxuICBRdWVyeUV4cHJlc3Npb24sXHJcbiAgVHJhbnNmb3JtLFxyXG4gIEZpbmRSZWNvcmQsXHJcbiAgRmluZFJlY29yZHMsXHJcbiAgYnVpbGRUcmFuc2Zvcm1cclxufSBmcm9tICdAb3JiaXQvZGF0YSc7XHJcbmltcG9ydCBMb2NhbFN0b3JhZ2VTb3VyY2UgZnJvbSAnLi4vc291cmNlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHVsbE9wZXJhdG9yIHtcclxuICAoc291cmNlOiBMb2NhbFN0b3JhZ2VTb3VyY2UsIGV4cHJlc3Npb246IFF1ZXJ5RXhwcmVzc2lvbik6IFByb21pc2U8VHJhbnNmb3JtW10+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUHVsbE9wZXJhdG9yczogRGljdDxQdWxsT3BlcmF0b3I+ID0ge1xyXG4gIGZpbmRSZWNvcmRzKHNvdXJjZTogTG9jYWxTdG9yYWdlU291cmNlLCBleHByZXNzaW9uOiBGaW5kUmVjb3Jkcyk6IFByb21pc2U8VHJhbnNmb3JtW10+IHtcclxuICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBbXTtcclxuXHJcbiAgICBjb25zdCB0eXBlRmlsdGVyID0gZXhwcmVzc2lvbi50eXBlO1xyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiBPcmJpdC5nbG9iYWxzLmxvY2FsU3RvcmFnZSkge1xyXG4gICAgICBpZiAoa2V5LmluZGV4T2Yoc291cmNlLm5hbWVzcGFjZSkgPT09IDApIHtcclxuICAgICAgICBsZXQgdHlwZXNNYXRjaCA9IGlzTm9uZSh0eXBlRmlsdGVyKTtcclxuXHJcbiAgICAgICAgaWYgKCF0eXBlc01hdGNoKSB7XHJcbiAgICAgICAgICBsZXQgZnJhZ21lbnRzID0ga2V5LnNwbGl0KHNvdXJjZS5kZWxpbWl0ZXIpO1xyXG4gICAgICAgICAgbGV0IHR5cGUgPSBmcmFnbWVudHNbMV07XHJcbiAgICAgICAgICB0eXBlc01hdGNoID0gKHR5cGVGaWx0ZXIgPT09IHR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVzTWF0Y2gpIHtcclxuICAgICAgICAgIGxldCByZWNvcmQgPSBKU09OLnBhcnNlKE9yYml0Lmdsb2JhbHMubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XHJcblxyXG4gICAgICAgICAgaWYgKHNvdXJjZS5rZXlNYXApIHtcclxuICAgICAgICAgICAgc291cmNlLmtleU1hcC5wdXNoUmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgb3BlcmF0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgb3A6ICdhZGRSZWNvcmQnLFxyXG4gICAgICAgICAgICByZWNvcmRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBPcmJpdC5Qcm9taXNlLnJlc29sdmUoW2J1aWxkVHJhbnNmb3JtKG9wZXJhdGlvbnMpXSk7XHJcbiAgfSxcclxuXHJcbiAgZmluZFJlY29yZChzb3VyY2U6IExvY2FsU3RvcmFnZVNvdXJjZSwgZXhwcmVzc2lvbjogRmluZFJlY29yZCk6IFByb21pc2U8VHJhbnNmb3JtW10+IHtcclxuICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBbXTtcclxuICAgIGNvbnN0IHJlcXVlc3RlZFJlY29yZCA9IGV4cHJlc3Npb24ucmVjb3JkO1xyXG5cclxuICAgIGZvciAobGV0IGtleSBpbiBPcmJpdC5nbG9iYWxzLmxvY2FsU3RvcmFnZSkge1xyXG4gICAgICBpZiAoa2V5LmluZGV4T2Yoc291cmNlLm5hbWVzcGFjZSkgPT09IDApIHtcclxuICAgICAgICBsZXQgZnJhZ21lbnRzID0ga2V5LnNwbGl0KHNvdXJjZS5kZWxpbWl0ZXIpO1xyXG4gICAgICAgIGxldCB0eXBlID0gZnJhZ21lbnRzWzFdO1xyXG4gICAgICAgIGxldCBpZCA9IGZyYWdtZW50c1syXTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IHJlcXVlc3RlZFJlY29yZC50eXBlICYmXHJcbiAgICAgICAgICAgIGlkID09PSByZXF1ZXN0ZWRSZWNvcmQuaWQpIHtcclxuICAgICAgICAgIGxldCByZWNvcmQgPSBKU09OLnBhcnNlKE9yYml0Lmdsb2JhbHMubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XHJcblxyXG4gICAgICAgICAgaWYgKHNvdXJjZS5rZXlNYXApIHtcclxuICAgICAgICAgICAgc291cmNlLmtleU1hcC5wdXNoUmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgb3BlcmF0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgb3A6ICdhZGRSZWNvcmQnLFxyXG4gICAgICAgICAgICByZWNvcmRcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBPcmJpdC5Qcm9taXNlLnJlc29sdmUoW2J1aWxkVHJhbnNmb3JtKG9wZXJhdGlvbnMpXSk7XHJcbiAgfVxyXG59O1xyXG4iXX0=