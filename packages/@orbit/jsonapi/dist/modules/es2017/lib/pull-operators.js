"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var data_1 = require("@orbit/data");
var request_settings_1 = require("./request-settings");
function deserialize(source, document) {
    var deserialized = source.serializer.deserializeDocument(document);
    var records = utils_1.toArray(deserialized.data);
    if (deserialized.included) {
        Array.prototype.push.apply(records, deserialized.included);
    }
    var operations = records.map(function (record) {
        return {
            op: 'replaceRecord',
            record: record
        };
    });
    return [data_1.buildTransform(operations)];
}
exports.PullOperators = {
    findRecord: function (source, query) {
        var expression = query.expression;
        var record = expression.record;
        var requestOptions = customRequestOptions(source, query);
        var settings = request_settings_1.buildFetchSettings(requestOptions);
        return source.fetch(source.resourceURL(record.type, record.id), settings)
            .then(function (data) { return deserialize(source, data); });
    },
    findRecords: function (source, query) {
        var expression = query.expression;
        var type = expression.type;
        var requestOptions = {};
        if (expression.filter) {
            requestOptions.filter = buildFilterParam(source, expression.filter);
        }
        if (expression.sort) {
            requestOptions.sort = buildSortParam(source, expression.sort);
        }
        if (expression.page) {
            requestOptions.page = expression.page;
        }
        requestOptions = utils_1.merge(requestOptions, customRequestOptions(source, query));
        var settings = request_settings_1.buildFetchSettings(requestOptions);
        return source.fetch(source.resourceURL(type), settings)
            .then(function (data) { return deserialize(source, data); });
    },
    findRelatedRecord: function (source, query) {
        var expression = query.expression;
        var record = expression.record, relationship = expression.relationship;
        var requestOptions = customRequestOptions(source, query);
        var settings = request_settings_1.buildFetchSettings(requestOptions);
        return source.fetch(source.relatedResourceURL(record.type, record.id, relationship), settings)
            .then(function (data) { return deserialize(source, data); });
    },
    findRelatedRecords: function (source, query) {
        var expression = query.expression;
        var record = expression.record, relationship = expression.relationship;
        var requestOptions = customRequestOptions(source, query);
        var settings = request_settings_1.buildFetchSettings(requestOptions);
        return source.fetch(source.relatedResourceURL(record.type, record.id, relationship), settings)
            .then(function (data) { return deserialize(source, data); });
    }
};
function customRequestOptions(source, query) {
    var requestOptions = {};
    var queryOptions = utils_1.deepGet(query, ['options', 'sources', source.name]) || {};
    if (queryOptions.include) {
        requestOptions.include = queryOptions.include.join(',');
    }
    if (queryOptions.timeout) {
        requestOptions.timeout = queryOptions.timeout;
    }
    return requestOptions;
}
function buildFilterParam(source, filterSpecifiers) {
    var filters = {};
    filterSpecifiers.forEach(function (filterSpecifier) {
        if (filterSpecifier.kind === 'attribute' && filterSpecifier.op === 'equal') {
            var attributeFilter = filterSpecifier;
            // Note: We don't know the `type` of the attribute here, so passing `null`
            var resourceAttribute = source.serializer.resourceAttribute(null, attributeFilter.attribute);
            filters[resourceAttribute] = attributeFilter.value;
        }
        else {
            throw new data_1.QueryExpressionParseError('Filter operation ${specifier.op} not recognized for JSONAPISource.', filterSpecifier);
        }
    });
    return filters;
}
function buildSortParam(source, sortSpecifiers) {
    return sortSpecifiers.map(function (sortSpecifier) {
        if (sortSpecifier.kind === 'attribute') {
            var attributeSort = sortSpecifier;
            // Note: We don't know the `type` of the attribute here, so passing `null`
            var resourceAttribute = source.serializer.resourceAttribute(null, attributeSort.attribute);
            return (sortSpecifier.order === 'descending' ? '-' : '') + resourceAttribute;
        }
        throw new data_1.QueryExpressionParseError('Sort specifier ${sortSpecifier.kind} not recognized for JSONAPISource.', sortSpecifier);
    }).join(',');
}
//# sourceMappingURL=data:application/json;base64,