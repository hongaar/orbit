"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@orbit/utils");
var JSONAPISerializer = (function () {
    function JSONAPISerializer(settings) {
        this._schema = settings.schema;
        this._keyMap = settings.keyMap;
    }
    Object.defineProperty(JSONAPISerializer.prototype, "schema", {
        get: function () {
            return this._schema;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JSONAPISerializer.prototype, "keyMap", {
        get: function () {
            return this._keyMap;
        },
        enumerable: true,
        configurable: true
    });
    JSONAPISerializer.prototype.resourceKey = function (type) {
        return 'id';
    };
    JSONAPISerializer.prototype.resourceType = function (type) {
        return utils_1.dasherize(this.schema.pluralize(type));
    };
    JSONAPISerializer.prototype.resourceRelationship = function (type, relationship) {
        return utils_1.dasherize(relationship);
    };
    JSONAPISerializer.prototype.resourceAttribute = function (type, attr) {
        return utils_1.dasherize(attr);
    };
    JSONAPISerializer.prototype.resourceIdentity = function (identity) {
        return {
            type: this.resourceType(identity.type),
            id: this.resourceId(identity.type, identity.id)
        };
    };
    JSONAPISerializer.prototype.resourceIds = function (type, ids) {
        var _this = this;
        return ids.map(function (id) { return _this.resourceId(type, id); });
    };
    JSONAPISerializer.prototype.resourceId = function (type, id) {
        var resourceKey = this.resourceKey(type);
        if (resourceKey === 'id') {
            return id;
        }
        else {
            return this.keyMap.idToKey(type, resourceKey, id);
        }
    };
    JSONAPISerializer.prototype.recordId = function (type, resourceId) {
        var resourceKey = this.resourceKey(type);
        if (resourceKey === 'id') {
            return resourceId;
        }
        var existingId = this.keyMap.keyToId(type, resourceKey, resourceId);
        if (existingId) {
            return existingId;
        }
        return this._generateNewId(type, resourceKey, resourceId);
    };
    JSONAPISerializer.prototype.recordType = function (resourceType) {
        return utils_1.camelize(this.schema.singularize(resourceType));
    };
    JSONAPISerializer.prototype.recordIdentity = function (resourceIdentity) {
        var type = this.recordType(resourceIdentity.type);
        var id = this.recordId(type, resourceIdentity.id);
        return { type: type, id: id };
    };
    JSONAPISerializer.prototype.recordAttribute = function (type, resourceAttribute) {
        return utils_1.camelize(resourceAttribute);
    };
    JSONAPISerializer.prototype.recordRelationship = function (type, resourceRelationship) {
        return utils_1.camelize(resourceRelationship);
    };
    JSONAPISerializer.prototype.serializeDocument = function (data) {
        return {
            data: utils_1.isArray(data) ? this.serializeRecords(data) : this.serializeRecord(data)
        };
    };
    JSONAPISerializer.prototype.serializeRecords = function (records) {
        var _this = this;
        return records.map(function (record) { return _this.serializeRecord(record); });
    };
    JSONAPISerializer.prototype.serializeRecord = function (record) {
        var resource = {
            type: this.resourceType(record.type)
        };
        this.serializeId(resource, record);
        this.serializeAttributes(resource, record);
        this.serializeRelationships(resource, record);
        return resource;
    };
    JSONAPISerializer.prototype.serializeId = function (resource, record) {
        var value = this.resourceId(record.type, record.id);
        if (value !== undefined) {
            resource.id = value;
        }
    };
    JSONAPISerializer.prototype.serializeAttributes = function (resource, record) {
        var _this = this;
        if (record.attributes) {
            Object.keys(record.attributes).forEach(function (attr) {
                _this.serializeAttribute(resource, record, attr);
            });
        }
    };
    JSONAPISerializer.prototype.serializeAttribute = function (resource, record, attr) {
        var value = record.attributes[attr];
        if (value !== undefined) {
            utils_1.deepSet(resource, ['attributes', this.resourceAttribute(record.type, attr)], value);
        }
    };
    JSONAPISerializer.prototype.serializeRelationships = function (resource, record) {
        var _this = this;
        if (record.relationships) {
            Object.keys(record.relationships).forEach(function (relationship) {
                _this.serializeRelationship(resource, record, relationship);
            });
        }
    };
    JSONAPISerializer.prototype.serializeRelationship = function (resource, record, relationship) {
        var _this = this;
        var value = record.relationships[relationship].data;
        if (value !== undefined) {
            var data = void 0;
            if (utils_1.isArray(value)) {
                data = value.map(function (id) { return _this.resourceIdentity(id); });
            }
            else if (value !== null) {
                data = this.resourceIdentity(value);
            }
            else {
                data = null;
            }
            var resourceRelationship = this.resourceRelationship(record.type, relationship);
            utils_1.deepSet(resource, ['relationships', resourceRelationship, 'data'], data);
        }
    };
    JSONAPISerializer.prototype.deserializeDocument = function (document) {
        var result;
        var data = document.data;
        if (utils_1.isArray(data)) {
            result = {
                data: data.map(this.deserializeResource, this)
            };
        }
        else {
            result = {
                data: this.deserializeResource(data)
            };
        }
        if (document.included) {
            result.included = document.included.map(this.deserializeResource, this);
        }
        return result;
    };
    JSONAPISerializer.prototype.deserializeResource = function (resource) {
        var record;
        var type = this.recordType(resource.type);
        var resourceKey = this.resourceKey(type);
        if (resourceKey === 'id') {
            record = { type: type, id: resource.id };
        }
        else {
            var id = void 0;
            var keys = void 0;
            if (resource.id) {
                keys = (_a = {},
                    _a[resourceKey] = resource.id,
                    _a);
                id = this.keyMap.idFromKeys(type, keys) ||
                    this.schema.generateId(type);
            }
            else {
                id = this.schema.generateId(type);
            }
            record = { type: type, id: id };
            if (keys) {
                record.keys = keys;
            }
        }
        this.deserializeAttributes(record, resource);
        this.deserializeRelationships(record, resource);
        if (this.keyMap) {
            this.keyMap.pushRecord(record);
        }
        return record;
        var _a;
    };
    JSONAPISerializer.prototype.deserializeAttributes = function (record, resource) {
        var _this = this;
        if (resource.attributes) {
            Object.keys(resource.attributes).forEach(function (resourceAttribute) {
                var value = resource.attributes[resourceAttribute];
                if (value !== undefined) {
                    var attr = _this.recordAttribute(record.type, resourceAttribute);
                    _this.deserializeAttribute(record, attr, value);
                }
            });
        }
    };
    JSONAPISerializer.prototype.deserializeAttribute = function (record, attr, value) {
        record.attributes = record.attributes || {};
        record.attributes[attr] = value;
    };
    JSONAPISerializer.prototype.deserializeRelationships = function (record, resource) {
        var _this = this;
        if (resource.relationships) {
            Object.keys(resource.relationships).forEach(function (resourceRel) {
                var value = resource.relationships[resourceRel];
                if (value !== undefined) {
                    var relationship = _this.recordRelationship(record.type, resourceRel);
                    _this.deserializeRelationship(record, relationship, value);
                }
            });
        }
    };
    JSONAPISerializer.prototype.deserializeRelationship = function (record, relationship, value) {
        var _this = this;
        var resourceData = value.data;
        if (resourceData !== undefined) {
            var data = void 0;
            if (resourceData === null) {
                data = null;
            }
            else if (utils_1.isArray(resourceData)) {
                data = resourceData.map(function (resourceIdentity) { return _this.recordIdentity(resourceIdentity); });
            }
            else {
                data = this.recordIdentity(resourceData);
            }
            record.relationships = record.relationships || {};
            record.relationships[relationship] = { data: data };
        }
    };
    JSONAPISerializer.prototype._generateNewId = function (type, keyName, keyValue) {
        var id = this.schema.generateId(type);
        this.keyMap.pushRecord({
            type: type,
            id: id,
            keys: (_a = {},
                _a[keyName] = keyValue,
                _a)
        });
        return id;
        var _a;
    };
    return JSONAPISerializer;
}());
exports.default = JSONAPISerializer;
//# sourceMappingURL=data:application/json;base64,