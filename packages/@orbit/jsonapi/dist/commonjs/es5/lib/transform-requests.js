"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("@orbit/data");
var utils_1 = require("@orbit/utils");
var request_settings_1 = require("./request-settings");
exports.TransformRequestProcessors = {
    addRecord: function (source, request) {
        var serializer = source.serializer;
        var record = request.record;
        var requestDoc = serializer.serializeDocument(record);
        var settings = request_settings_1.buildFetchSettings(request, { method: 'POST', json: requestDoc });
        return source.fetch(source.resourceURL(record.type), settings).then(function (raw) {
            var responseDoc = serializer.deserializeDocument(raw);
            var updatedRecord = responseDoc.data;
            var updateOps = data_1.recordDiffs(record, updatedRecord);
            if (updateOps.length > 0) {
                return [data_1.buildTransform(updateOps)];
            }
        });
    },
    removeRecord: function (source, request) {
        var _a = request.record,
            type = _a.type,
            id = _a.id;
        var settings = request_settings_1.buildFetchSettings(request, { method: 'DELETE' });
        return source.fetch(source.resourceURL(type, id), settings).then(function () {
            return [];
        });
    },
    replaceRecord: function (source, request) {
        var record = request.record;
        var type = record.type,
            id = record.id;
        var requestDoc = source.serializer.serializeDocument(record);
        var settings = request_settings_1.buildFetchSettings(request, { method: 'PATCH', json: requestDoc });
        return source.fetch(source.resourceURL(type, id), settings).then(function () {
            return [];
        });
    },
    addToRelatedRecords: function (source, request) {
        var _a = request.record,
            type = _a.type,
            id = _a.id;
        var relationship = request.relationship;
        var json = {
            data: request.relatedRecords.map(function (r) {
                return source.serializer.resourceIdentity(r);
            })
        };
        var settings = request_settings_1.buildFetchSettings(request, { method: 'POST', json: json });
        return source.fetch(source.resourceRelationshipURL(type, id, relationship), settings).then(function () {
            return [];
        });
    },
    removeFromRelatedRecords: function (source, request) {
        var _a = request.record,
            type = _a.type,
            id = _a.id;
        var relationship = request.relationship;
        var json = {
            data: request.relatedRecords.map(function (r) {
                return source.serializer.resourceIdentity(r);
            })
        };
        var settings = request_settings_1.buildFetchSettings(request, { method: 'DELETE', json: json });
        return source.fetch(source.resourceRelationshipURL(type, id, relationship), settings).then(function () {
            return [];
        });
    },
    replaceRelatedRecord: function (source, request) {
        var _a = request.record,
            type = _a.type,
            id = _a.id;
        var relationship = request.relationship,
            relatedRecord = request.relatedRecord;
        var json = {
            data: relatedRecord ? source.serializer.resourceIdentity(relatedRecord) : null
        };
        var settings = request_settings_1.buildFetchSettings(request, { method: 'PATCH', json: json });
        return source.fetch(source.resourceRelationshipURL(type, id, relationship), settings).then(function () {
            return [];
        });
    },
    replaceRelatedRecords: function (source, request) {
        var _a = request.record,
            type = _a.type,
            id = _a.id;
        var relationship = request.relationship,
            relatedRecords = request.relatedRecords;
        var json = {
            data: relatedRecords.map(function (r) {
                return source.serializer.resourceIdentity(r);
            })
        };
        var settings = request_settings_1.buildFetchSettings(request, { method: 'PATCH', json: json });
        return source.fetch(source.resourceRelationshipURL(type, id, relationship), settings).then(function () {
            return [];
        });
    }
};
function getTransformRequests(source, transform) {
    var operations = transform.operations;
    var requests = [];
    var prevRequest;
    var options = transform.options && transform.options.sources && transform.options.sources[source.name] || {};
    transform.operations.forEach(function (operation) {
        var request;
        var newRequestNeeded = true;
        if (prevRequest && data_1.equalRecordIdentities(prevRequest.record, operation.record)) {
            if (operation.op === 'removeRecord') {
                newRequestNeeded = false;
                if (prevRequest.op !== 'removeRecord') {
                    prevRequest = null;
                    requests.pop();
                }
            } else if (prevRequest.op === 'addRecord' || prevRequest.op === 'replaceRecord') {
                if (operation.op === 'replaceAttribute') {
                    newRequestNeeded = false;
                    replaceRecordAttribute(prevRequest.record, operation.attribute, operation.value);
                } else if (operation.op === 'replaceRelatedRecord') {
                    newRequestNeeded = false;
                    replaceRecordHasOne(prevRequest.record, operation.relationship, operation.relatedRecord);
                } else if (operation.op === 'replaceRelatedRecords') {
                    newRequestNeeded = false;
                    replaceRecordHasMany(prevRequest.record, operation.relationship, operation.relatedRecords);
                }
            } else if (prevRequest.op === 'addToRelatedRecords' && operation.op === 'addToRelatedRecords' && prevRequest.relationship === operation.relationship) {
                newRequestNeeded = false;
                prevRequest.relatedRecords.push(data_1.cloneRecordIdentity(operation.relatedRecord));
            }
        }
        if (newRequestNeeded) {
            request = OperationToRequestMap[operation.op](operation);
        }
        if (request) {
            if (options.include) {
                request.include = options.include.join(',');
            }
            if (options.timeout) {
                request.timeout = options.timeout;
            }
            requests.push(request);
            prevRequest = request;
        }
    });
    return requests;
}
exports.getTransformRequests = getTransformRequests;
var OperationToRequestMap = {
    addRecord: function (operation) {
        return {
            op: 'addRecord',
            record: utils_1.clone(operation.record)
        };
    },
    removeRecord: function (operation) {
        return {
            op: 'removeRecord',
            record: data_1.cloneRecordIdentity(operation.record)
        };
    },
    replaceAttribute: function (operation) {
        var record = data_1.cloneRecordIdentity(operation.record);
        replaceRecordAttribute(record, operation.attribute, operation.value);
        return {
            op: 'replaceRecord',
            record: record
        };
    },
    replaceRecord: function (operation) {
        return {
            op: 'replaceRecord',
            record: utils_1.clone(operation.record)
        };
    },
    addToRelatedRecords: function (operation) {
        return {
            op: 'addToRelatedRecords',
            record: data_1.cloneRecordIdentity(operation.record),
            relationship: operation.relationship,
            relatedRecords: [data_1.cloneRecordIdentity(operation.relatedRecord)]
        };
    },
    removeFromRelatedRecords: function (operation) {
        return {
            op: 'removeFromRelatedRecords',
            record: data_1.cloneRecordIdentity(operation.record),
            relationship: operation.relationship,
            relatedRecords: [data_1.cloneRecordIdentity(operation.relatedRecord)]
        };
    },
    replaceRelatedRecord: function (operation) {
        var record = {
            type: operation.record.type,
            id: operation.record.id
        };
        utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecord);
        return {
            op: 'replaceRecord',
            record: record
        };
    },
    replaceRelatedRecords: function (operation) {
        var record = data_1.cloneRecordIdentity(operation.record);
        utils_1.deepSet(record, ['relationships', operation.relationship, 'data'], operation.relatedRecords);
        return {
            op: 'replaceRecord',
            record: record
        };
    }
};
function replaceRecordAttribute(record, attribute, value) {
    utils_1.deepSet(record, ['attributes', attribute], value);
}
function replaceRecordHasOne(record, relationship, relatedRecord) {
    utils_1.deepSet(record, ['relationships', relationship, 'data'], relatedRecord ? data_1.cloneRecordIdentity(relatedRecord) : null);
}
function replaceRecordHasMany(record, relationship, relatedRecords) {
    utils_1.deepSet(record, ['relationships', relationship, 'data'], relatedRecords.map(function (r) {
        return data_1.cloneRecordIdentity(r);
    }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,